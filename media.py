import base64
import io
import requests
from telebot import types
from openai import OpenAI

from settings import bot, client, TOKEN, IMAGE_MODEL, VISION_MODEL, \
    PAY_URL_PACK_PHOTO_50, PAY_URL_PACK_PHOTO_200, \
    PAY_URL_PACK_DOC_10, PAY_URL_PACK_DOC_30, \
    PAY_URL_PACK_ANALYZE_20, PAY_URL_PACK_ANALYZE_100
from tariffs import TARIFFS, user_tariffs
from storage import get_or_init_month_balance, dec_media, get_media_balance, \
                    read_trials, mark_trial_used, add_package
from media_utils import make_pdf, make_excel, make_pptx

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–µ: —á—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∂–¥—ë–º –¥–∞–ª–µ–µ
user_media_state = {}   # {chat_id: {"mode": "photo_gen"/"photo_analyze"/"pdf"/"excel"/"pptx"}}

# --- –ú–µ–Ω—é –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ ---

def multimedia_menu():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ", callback_data="mm_photo_gen"),
        types.InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ", callback_data="mm_photo_ana"),
        types.InlineKeyboardButton("üìë PDF", callback_data="mm_pdf"),
        types.InlineKeyboardButton("üìä Excel", callback_data="mm_excel"),
        types.InlineKeyboardButton("üéû –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", callback_data="mm_pptx"),
    )
    kb.add(types.InlineKeyboardButton("üß© –î–æ–∫—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç—ã", callback_data="mm_buy"))
    return kb

def multimedia_buy_menu():
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(types.InlineKeyboardButton("üì∏ 50 —Ñ–æ—Ç–æ ‚Ä¢ 299 ‚ÇΩ", url=PAY_URL_PACK_PHOTO_50))
    kb.add(types.InlineKeyboardButton("üì∏ 200 —Ñ–æ—Ç–æ ‚Ä¢ 799 ‚ÇΩ", url=PAY_URL_PACK_PHOTO_200))
    kb.add(types.InlineKeyboardButton("üìë 10 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ‚Ä¢ 199 ‚ÇΩ", url=PAY_URL_PACK_DOC_10))
    kb.add(types.InlineKeyboardButton("üìë 30 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ‚Ä¢ 499 ‚ÇΩ", url=PAY_URL_PACK_DOC_30))
    kb.add(types.InlineKeyboardButton("üîç 20 –∞–Ω–∞–ª–∏–∑–æ–≤ ‚Ä¢ 149 ‚ÇΩ", url=PAY_URL_PACK_ANALYZE_20))
    kb.add(types.InlineKeyboardButton("üîç 100 –∞–Ω–∞–ª–∏–∑–æ–≤ ‚Ä¢ 499 ‚ÇΩ", url=PAY_URL_PACK_ANALYZE_100))
    return kb

# –í—ã–Ω–µ—Å–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É
def _included_limits_for(chat_id: int) -> dict:
    info = user_tariffs.get(chat_id)
    if not info:
        return {"photos": 0, "docs": 0, "analysis": 0}
    tariff_key = info["tariff"]
    tariff = TARIFFS.get(tariff_key, {})
    return tariff.get("media_limits", {"photos": 0, "docs": 0, "analysis": 0})

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –º–µ—Å—è—Ü (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–æ—Å—Ç–∞–≤–∏–º –∏–∑ —Ç–∞—Ä–∏—Ñ–∞)
def ensure_month_balance(chat_id: int):
    defaults = _included_limits_for(chat_id)
    return get_or_init_month_balance(chat_id, defaults)

# –ú—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º —Ç—Ä–∏–∞–ª–∞ (–ø–æ 1 —à—Ç—É–∫–µ, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–∞)
def try_consume(chat_id: int, kind: str) -> bool:
    # –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º —Å –º–µ—Å—è—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    if user_tariffs.get(chat_id):
        ensure_month_balance(chat_id)
        return dec_media(chat_id, kind, 1)
    # –Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–∞ ‚Äî —Ç—Ä–∏–∞–ª
    trials = read_trials(chat_id)
    if kind == "photos" and trials["photo_used"] == 0:
        mark_trial_used(chat_id, "photos")
        return True
    if kind == "docs" and trials["doc_used"] == 0:
        mark_trial_used(chat_id, "docs")
        return True
    if kind == "analysis" and trials["analysis_used"] == 0:
        mark_trial_used(chat_id, "analysis")
        return True
    return False

# –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏
def out_of_limit_text(kind: str) -> str:
    m = {
        "photos": "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ",
        "docs": "—Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞",
        "analysis": "–∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ",
    }[kind]
    return f"üö´ –õ–∏–º–∏—Ç {m} –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Ñ–æ—Ä–º–∏ —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –¥–æ–∫—É–ø–∏ –ø–∞–∫–µ—Ç üëá"

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: –∫–æ–º–∞–Ω–¥–∞ ¬´–ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞¬ª ---

@bot.message_handler(func=lambda msg: msg.text == "üé® –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞")
def open_multimedia(m):
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é:", reply_markup=multimedia_menu())

@bot.callback_query_handler(func=lambda call: call.data == "mm_buy")
def on_buy(call):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:", reply_markup=multimedia_buy_menu())

# --- –í–µ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π ---

@bot.callback_query_handler(func=lambda call: call.data == "mm_photo_gen")
def on_photo_gen(call):
    bot.answer_callback_query(call.id)
    user_media_state[call.message.chat.id] = {"mode": "photo_gen"}
    bot.send_message(call.message.chat.id, "–û–ø–∏—à–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å:")

@bot.callback_query_handler(func=lambda call: call.data == "mm_photo_ana")
def on_photo_analyze(call):
    bot.answer_callback_query(call.id)
    user_media_state[call.message.chat.id] = {"mode": "photo_analyze"}
    bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —è –æ–ø–∏—à—É –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ.")

@bot.callback_query_handler(func=lambda call: call.data == "mm_pdf")
def on_pdf(call):
    bot.answer_callback_query(call.id)
    user_media_state[call.message.chat.id] = {"mode": "pdf"}
    bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è PDF (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞).")

@bot.callback_query_handler(func=lambda call: call.data == "mm_excel")
def on_excel(call):
    bot.answer_callback_query(call.id)
    user_media_state[call.message.chat.id] = {"mode": "excel"}
    bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ CSV-–ø–æ–¥–æ–±–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n–ó–∞–≥–æ–ª–æ–≤–æ–∫1, –ó–∞–≥–æ–ª–æ–≤–æ–∫2\n–ó–Ω–∞—á–µ–Ω–∏–µ1, –ó–Ω–∞—á–µ–Ω–∏–µ2")

@bot.callback_query_handler(func=lambda call: call.data == "mm_pptx")
def on_pptx(call):
    bot.answer_callback_query(call.id)
    user_media_state[call.message.chat.id] = {"mode": "pptx"}
    bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏ –ø–ª–∞–Ω —Å–ª–∞–π–¥–æ–≤:\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: –ü–µ—Ä–≤—ã–π —Å–ª–∞–π–¥\n- –ü—É–Ω–∫—Ç 1\n- –ü—É–Ω–∫—Ç 2\n===\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: –í—Ç–æ—Ä–æ–π —Å–ª–∞–π–¥\n- –ü—É–Ω–∫—Ç A")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ photo_gen/pdf/excel/pptx ---

@bot.message_handler(func=lambda msg: user_media_state.get(msg.chat.id, {}).get("mode") in ("photo_gen","pdf","excel","pptx"))
def media_text_router(m):
    state = user_media_state.get(m.chat.id, {})
    mode = state.get("mode")
    if mode == "photo_gen":
        # –ª–∏–º–∏—Ç –Ω–∞ —Ñ–æ—Ç–æ
        if not try_consume(m.chat.id, "photos"):
            bot.send_message(m.chat.id, out_of_limit_text("photos"), reply_markup=multimedia_buy_menu())
            user_media_state.pop(m.chat.id, None)
            return
        # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ
        prompt = m.text.strip()
        try:
            result = client.images.generate(
                model=IMAGE_MODEL,
                prompt=prompt,
                size="1024x1024",
            )
            b64 = result.data[0].b64_json
            img_bytes = base64.b64decode(b64)
            bot.send_photo(m.chat.id, photo=io.BytesIO(img_bytes), caption="–ì–æ—Ç–æ–≤–æ ‚úÖ")
        except Exception as e:
            bot.send_message(m.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        finally:
            user_media_state.pop(m.chat.id, None)
        return

    if mode == "pdf":
        if not try_consume(m.chat.id, "docs"):
            bot.send_message(m.chat.id, out_of_limit_text("docs"), reply_markup=multimedia_buy_menu())
            user_media_state.pop(m.chat.id, None)
            return
        pdf_bytes = make_pdf(m.text or "")
        bot.send_document(m.chat.id, document=io.BytesIO(pdf_bytes), visible_file_name="document.pdf", caption="PDF –≥–æ—Ç–æ–≤ ‚úÖ")
        user_media_state.pop(m.chat.id, None)
        return

    if mode == "excel":
        if not try_consume(m.chat.id, "docs"):
            bot.send_message(m.chat.id, out_of_limit_text("docs"), reply_markup=multimedia_buy_menu())
            user_media_state.pop(m.chat.id, None)
            return
        xlsx_bytes = make_excel(m.text or "")
        bot.send_document(m.chat.id, document=io.BytesIO(xlsx_bytes), visible_file_name="data.xlsx", caption="Excel –≥–æ—Ç–æ–≤ ‚úÖ")
        user_media_state.pop(m.chat.id, None)
        return

    if mode == "pptx":
        if not try_consume(m.chat.id, "docs"):
            bot.send_message(m.chat.id, out_of_limit_text("docs"), reply_markup=multimedia_buy_menu())
            user_media_state.pop(m.chat.id, None)
            return
        pptx_bytes = make_pptx(m.text or "")
        bot.send_document(m.chat.id, document=io.BytesIO(pptx_bytes), visible_file_name="slides.pptx", caption="–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ ‚úÖ")
        user_media_state.pop(m.chat.id, None)
        return

# --- –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ---

@bot.message_handler(content_types=["photo"])
def on_photo_message(m):
    state = user_media_state.get(m.chat.id, {})
    if state.get("mode") != "photo_analyze":
        return  # –Ω–µ –∂–¥—ë–º —Ñ–æ—Ç–æ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç –æ–±—â–∏–π fallback

    if not try_consume(m.chat.id, "analysis"):
        bot.send_message(m.chat.id, out_of_limit_text("analysis"), reply_markup=multimedia_buy_menu())
        user_media_state.pop(m.chat.id, None)
        return

    try:
        file_id = m.photo[-1].file_id
        file_info = bot.get_file(file_id)
        url = f"https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}"
        img_resp = requests.get(url, timeout=30)
        img_resp.raise_for_status()
        img_b64 = base64.b64encode(img_resp.content).decode("utf-8")
        data_url = f"data:image/jpeg;base64,{img_b64}"

        # Vision-–∑–∞–ø—Ä–æ—Å
        resp = client.chat.completions.create(
            model=VISION_MODEL,
            messages=[{
                "role": "user",
                "content": [
                    {"type": "input_text", "text": "–û–ø–∏—à–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Ñ–æ—Ç–æ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                    {"type": "input_image", "image_url": data_url}
                ]
            }],
        )
        text = resp.choices[0].message.content.strip()
        bot.send_message(m.chat.id, text or "–ì–æ—Ç–æ–≤–æ ‚úÖ")
    except Exception as e:
        bot.send_message(m.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    finally:
        user_media_state.pop(m.chat.id, None)
