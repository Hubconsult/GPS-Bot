import base64
import io
import requests
from telebot import types

from settings import bot, client, TOKEN, IMAGE_MODEL, VISION_MODEL
from usage_tracker import compose_display_name, record_user_activity
from worker_media import enqueue_media_task

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–µ: —á—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∂–¥—ë–º –¥–∞–ª–µ–µ
user_media_state = {}   # {chat_id: {"mode": "photo_gen"/"photo_analyze"/"pdf"/"excel"/"pptx"}}

# --- –ú–µ–Ω—é –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ ---

def multimedia_menu():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("–§–æ—Ç–æ", callback_data="mm_photo_gen"),
        types.InlineKeyboardButton("–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ", callback_data="mm_photo_ana"),
        types.InlineKeyboardButton("PDF", callback_data="mm_pdf"),
        types.InlineKeyboardButton("Excel", callback_data="mm_excel"),
        types.InlineKeyboardButton("–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", callback_data="mm_pptx"),
    )
    return kb
# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: –∫–æ–º–∞–Ω–¥–∞ ¬´–ú–µ–¥–∏–∞¬ª ---

def _display_name(user) -> str:
    return compose_display_name(
        username=getattr(user, "username", None),
        first_name=getattr(user, "first_name", None),
        last_name=getattr(user, "last_name", None),
    )


@bot.message_handler(func=lambda msg: msg.text == "–ú–µ–¥–∏–∞")
def open_multimedia(m):
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é:", reply_markup=multimedia_menu())

# --- –í–µ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π ---

@bot.callback_query_handler(func=lambda call: call.data == "mm_photo_gen")
def on_photo_gen(call):
    bot.answer_callback_query(call.id)
    user_media_state[call.message.chat.id] = {"mode": "photo_gen"}
    bot.send_message(call.message.chat.id, "–û–ø–∏—à–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å:")

@bot.callback_query_handler(func=lambda call: call.data == "mm_photo_ana")
def on_photo_analyze(call):
    bot.answer_callback_query(call.id)
    user_media_state[call.message.chat.id] = {"mode": "photo_analyze"}
    bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —è –æ–ø–∏—à—É –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ.")

@bot.callback_query_handler(func=lambda call: call.data == "mm_pdf")
def on_pdf(call):
    bot.answer_callback_query(call.id)
    user_media_state[call.message.chat.id] = {"mode": "pdf"}
    bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è PDF (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞).")

@bot.callback_query_handler(func=lambda call: call.data == "mm_excel")
def on_excel(call):
    bot.answer_callback_query(call.id)
    user_media_state[call.message.chat.id] = {"mode": "excel"}
    bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ CSV-–ø–æ–¥–æ–±–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n–ó–∞–≥–æ–ª–æ–≤–æ–∫1, –ó–∞–≥–æ–ª–æ–≤–æ–∫2\n–ó–Ω–∞—á–µ–Ω–∏–µ1, –ó–Ω–∞—á–µ–Ω–∏–µ2")

@bot.callback_query_handler(func=lambda call: call.data == "mm_pptx")
def on_pptx(call):
    bot.answer_callback_query(call.id)
    user_media_state[call.message.chat.id] = {"mode": "pptx"}
    bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏ –ø–ª–∞–Ω —Å–ª–∞–π–¥–æ–≤:\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: –ü–µ—Ä–≤—ã–π —Å–ª–∞–π–¥\n- –ü—É–Ω–∫—Ç 1\n- –ü—É–Ω–∫—Ç 2\n===\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: –í—Ç–æ—Ä–æ–π —Å–ª–∞–π–¥\n- –ü—É–Ω–∫—Ç A")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ photo_gen/pdf/excel/pptx ---

@bot.message_handler(func=lambda msg: user_media_state.get(msg.chat.id, {}).get("mode") in ("photo_gen","pdf","excel","pptx"))
def media_text_router(m):
    state = user_media_state.get(m.chat.id, {})
    mode = state.get("mode")
    if mode == "photo_gen":
        # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ
        prompt = m.text.strip()
        record_user_activity(
            getattr(m.from_user, "id", m.chat.id),
            category="image",
            display_name=_display_name(m.from_user),
        )
        try:
            result = client.images.generate(
                model=IMAGE_MODEL,
                prompt=prompt,
                size="1024x1024",
                quality="standard",
            )
            b64 = result.data[0].b64_json
            img_bytes = base64.b64decode(b64)
            bot.send_photo(m.chat.id, photo=io.BytesIO(img_bytes), caption="–ì–æ—Ç–æ–≤–æ ‚úÖ")
        except Exception as e:
            bot.send_message(m.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        finally:
            user_media_state.pop(m.chat.id, None)
        return

    if mode == "pdf":
        record_user_activity(
            getattr(m.from_user, "id", m.chat.id),
            category="document",
            display_name=_display_name(m.from_user),
        )
        bot.send_message(m.chat.id, "üìÑ –ì–æ—Ç–æ–≤–ª—é PDF, –ø—Ä–∏—à–ª—é —Ñ–∞–π–ª —á—É—Ç—å –ø–æ–∑–∂–µ‚Ä¶")
        enqueue_media_task(m.chat.id, "pdf", m.text or "")
        user_media_state.pop(m.chat.id, None)
        return

    if mode == "excel":
        record_user_activity(
            getattr(m.from_user, "id", m.chat.id),
            category="document",
            display_name=_display_name(m.from_user),
        )
        bot.send_message(m.chat.id, "üìä –§–æ—Ä–º–∏—Ä—É—é Excel, –æ—Ç–ø—Ä–∞–≤–ª—é, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–æ–±–µ—Ä—É –¥–∞–Ω–Ω—ã–µ‚Ä¶")
        enqueue_media_task(m.chat.id, "excel", m.text or "")
        user_media_state.pop(m.chat.id, None)
        return

    if mode == "pptx":
        record_user_activity(
            getattr(m.from_user, "id", m.chat.id),
            category="document",
            display_name=_display_name(m.from_user),
        )
        bot.send_message(m.chat.id, "üñºÔ∏è –°–æ–±–∏—Ä–∞—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é, —Å–∫–æ—Ä–æ –ø—Ä–∏—à–ª—é –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª‚Ä¶")
        enqueue_media_task(m.chat.id, "pptx", m.text or "")
        user_media_state.pop(m.chat.id, None)
        return

# --- –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ---

@bot.message_handler(content_types=["photo"])
def on_photo_message(m):
    state = user_media_state.get(m.chat.id, {})
    if state.get("mode") != "photo_analyze":
        return  # –Ω–µ –∂–¥—ë–º —Ñ–æ—Ç–æ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç –æ–±—â–∏–π fallback

    try:
        file_id = m.photo[-1].file_id
        file_info = bot.get_file(file_id)
        url = f"https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}"
        img_resp = requests.get(url, timeout=30)
        img_resp.raise_for_status()
        img_b64 = base64.b64encode(img_resp.content).decode("utf-8")
        data_url = f"data:image/jpeg;base64,{img_b64}"

        record_user_activity(
            getattr(m.from_user, "id", m.chat.id),
            category="text",
            display_name=_display_name(m.from_user),
        )

        # Vision-–∑–∞–ø—Ä–æ—Å
        resp = client.chat.completions.create(
            model=VISION_MODEL,
            messages=[{
                "role": "user",
                "content": [
                    {"type": "input_text", "text": "–û–ø–∏—à–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Ñ–æ—Ç–æ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                    {"type": "input_image", "image_url": data_url}
                ]
            }],
        )
        text = resp.choices[0].message.content.strip()
        bot.send_message(m.chat.id, text or "–ì–æ—Ç–æ–≤–æ ‚úÖ")
    except Exception as e:
        bot.send_message(m.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    finally:
        user_media_state.pop(m.chat.id, None)
