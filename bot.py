import threading
import time
import logging
import datetime
from threading import Lock
from contextlib import suppress
from pathlib import Path
from typing import Set

from storage import (
    init_db,
    get_user_usage,
    increment_used,
    clear_history,
    iter_history_chat_ids,
    r,
    TTL,
)
from telebot import types

# Tariff configuration and state tracking
from tariffs import (
    TARIFFS,
    TARIFF_MODES,
    user_tariffs,
    activate_tariff,
    check_expiring_tariffs,
    start_payment,
)
from hints import get_hint
from info import get_info_text, info_keyboard

# Ensure media handlers are registered
import media
from media import multimedia_menu

from bot_utils import show_typing

# --- –ö–æ–Ω—Ñ–∏–≥: –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ settings.py ---
from settings import (
    bot,
    client,
    CHAT_MODEL,
    FREE_LIMIT,
    is_owner,
    PAY_URL_HARMONY,
    PAY_URL_REFLECTION,
    PAY_URL_TRAVEL,
    SYSTEM_PROMPT,
)

# Initialize the SQLite storage before handling any requests
init_db()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ ---
CHANNEL_USERNAME = "@GPT5_Navigator"
CHANNEL_URL = "https://t.me/GPT5_Navigator"
BOT_DEEP_LINK = "https://t.me/VnutrenniyGPS_bot"
PHOTO_FILE = Path(__file__).resolve().parent / "5371038341350424631-1280x720.png"
START_CAPTION = (
    "<b>GPT-5 –ù–∞–≤–∏–≥–∞—Ç–æ—Ä</b>\n\n"
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –≠—Ç–æ —Ç–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π GPS.\n\n"
    "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
    "‚Äî Psychological Astrologer: –ø–æ–∏—Å–∫ —Å–º—ã—Å–ª–æ–≤ –≤ –∫–∞—Ä—Ç–µ –∂–∏–∑–Ω–∏\n"
    "‚Äî Spiritual Psychologist: –ø–æ–Ω–∏–º–∞–Ω–∏–µ –≥–ª—É–±–∏–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥—É—à–∏\n"
    "‚Äî Psychological Numerologist: —á–∏—Å–ª–∞ –∫–∞–∫ –∫–ª—é—á–∏ –∫ —Å—É–¥—å–±–µ\n"
    "‚Äî –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7, —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –∏ –¥—Ä—É–∂–µ—Å–∫–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã\n"
    "‚Äî –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏\n\n"
    "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª."
)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_moods = {}
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à)
user_histories = {}  # {chat_id: [ {role: "user"/"assistant", content: "..."}, ... ]}
user_messages = {}  # {chat_id: [message_id, ...]}

# –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω–∏–∫ –ø–æ —Ä–µ–∂–∏–º–∞–º
user_test_modes = {}  # {chat_id: str}
user_test_mode_usage = {}  # {chat_id: {"short_friend": int, "philosopher": int, "academic": int}}

# –∫–µ—à –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (–¥–ª—è –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞, –µ—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
_language_cache: dict[int, str] = {}

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ ---
verified_users: Set[int] = set()
pending_verification: Set[int] = set()


def has_channel_subscription(user_id: int) -> bool:
    try:
        status = bot.get_chat_member(CHANNEL_USERNAME, user_id).status
    except Exception:
        return False
    return status in {"member", "administrator", "creator"}


def subscription_check_keyboard() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É", callback_data="check_and_open"))
    return kb


def pay_inline(chat_id: int) -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(row_width=1)
    for key, tariff in TARIFFS.items():
        url = start_payment(chat_id, key)
        kb.add(
            types.InlineKeyboardButton(
                f"{tariff['name']} ‚Ä¢ {tariff['price']} ‚ÇΩ", url=url
            )
        )
    return kb


def send_start_window(chat_id) -> None:
    keyboard = subscription_check_keyboard()

    try:
        with PHOTO_FILE.open("rb") as photo:
            bot.send_photo(
                chat_id,
                photo,
                caption=START_CAPTION,
                reply_markup=keyboard,
                parse_mode="HTML",
            )
    except FileNotFoundError:
        bot.send_message(
            chat_id,
            START_CAPTION,
            reply_markup=keyboard,
            parse_mode="HTML",
        )


def send_subscription_prompt(chat_id: int, user_id: int) -> None:
    send_start_window(chat_id)
    pending_verification.add(user_id)


def send_subscription_reminder(chat_id: int, user_id: int, *, force: bool = False) -> None:
    if not force and user_id in pending_verification:
        return

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_URL))
    kb.add(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_and_open"))

    bot.send_message(
        chat_id,
        (
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @GPT5_Navigator.\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª."
        ),
        reply_markup=kb,
    )

    pending_verification.add(user_id)


def send_subscription_confirmed(chat_id: int) -> None:
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞", url=BOT_DEEP_LINK))
    bot.send_message(
        chat_id,
        "–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É.",
        reply_markup=kb,
    )


def ensure_verified(
    chat_id: int,
    user_id: int,
    *,
    remind: bool = True,
    force_check: bool = False,
) -> bool:
    if not force_check and user_id in verified_users:
        return True

    if has_channel_subscription(user_id):
        verified_users.add(user_id)
        pending_verification.discard(user_id)
        return True

    verified_users.discard(user_id)

    if remind:
        send_subscription_reminder(chat_id, user_id)

    return False


# --- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é Telegram (–±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π —á–∞—Ç–∞)
bot.set_my_commands([
    types.BotCommand("info", "–¢–∞—Ä–∏—Ñ—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ GPT-5"),
    types.BotCommand("pay", "–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–æ–≤"),
    types.BotCommand("media", "–ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞"),
    types.BotCommand("profile", "–ü—Ä–æ—Ñ–∏–ª—å"),
])


# --- /info
@bot.message_handler(commands=["info"])
def cmd_info(m):
    bot.send_message(
        m.chat.id,
        get_info_text(),
        reply_markup=info_keyboard(),
        parse_mode="HTML",
    )


# --- /pay
@bot.message_handler(commands=["pay"])
def cmd_pay(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    bot.send_message(
        m.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
        reply_markup=pay_inline(m.chat.id),
    )


# --- /media
@bot.message_handler(commands=["media"])
def cmd_media(m):
    bot.send_message(
        m.chat.id,
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ —Ñ—É–Ω–∫—Ü–∏–∏:",
        reply_markup=multimedia_menu(),
    )


# --- /profile
@bot.message_handler(commands=["profile"])
def cmd_profile(m):
    bot.send_message(
        m.chat.id,
        f"–í–∞—à ID: {m.from_user.id}\n"
        f"–ò–º—è: {m.from_user.first_name}\n"
        "–ü–æ–¥–ø–∏—Å–∫–∞: FREE (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)",
    )


def send_and_store(chat_id, text, **kwargs):
    msg = bot.send_message(chat_id, text, **kwargs)
    user_messages.setdefault(chat_id, []).append(msg.message_id)
    return msg

# --- –û–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---


def send_welcome_menu(chat_id: int) -> None:
    user_moods[chat_id] = []
    text = (
        "<b>–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π GPS</b>\n"
        "‚óè online\n\n"
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø —Ç–≤–æ–π –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π GPS!"
    )
    send_and_store(chat_id, text, reply_markup=main_menu())

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    kb.add("–ß–µ–∫-–∏–Ω", "–°—Ç–∞—Ç–∞", "–û–ø–ª–∞—Ç–∞", "–ú–µ–¥–∏–∞")
    kb.add("–û—á–∏—Å—Ç–∏—Ç—å", "Lang üåê")
    return kb


def pay_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    kb.add("–°–æ–∑–≤—É—á–∏–µ ‚Ä¢ –∏–∫–æ–Ω–∫–∏ ‚Äî 299 ‚ÇΩ")
    kb.add("–û—Ç—Ä–∞–∂–µ–Ω–∏–µ ‚Ä¢ –∞–≤–∞—Ç–∞—Ä–∫–∏ ‚Äî 999 ‚ÇΩ")
    kb.add("–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ ‚Ä¢ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ñ–æ–Ω—ã ‚Äî 1999 ‚ÇΩ")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

# --- –†–∞–±–æ—Ç–∞ —Å —è–∑—ã–∫–æ–º ---


def set_language(chat_id: int, lang: str) -> None:
    try:
        r.set(f"lang:{chat_id}", lang, ex=TTL)
    except Exception:
        pass
    _language_cache[chat_id] = lang


def get_language(chat_id: int) -> str:
    try:
        lang = r.get(f"lang:{chat_id}")
    except Exception:
        lang = None

    if lang:
        if isinstance(lang, bytes):
            lang = lang.decode("utf-8")
        _language_cache[chat_id] = str(lang)
        return str(lang)

    return _language_cache.get(chat_id, "ru")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ ---

def check_limit(chat_id) -> bool:
    if is_owner(chat_id):
        return True

    if not ensure_verified(chat_id, chat_id, force_check=True):
        return False

    used, has_tariff = get_user_usage(chat_id)
    if has_tariff == 0 and used >= FREE_LIMIT:
        bot.send_message(
            chat_id,
            "üö´ <b>–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω.</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ üëá",
            reply_markup=pay_inline(chat_id),
        )
        return False
    return True

# --- Helpers ---

def increment_counter(chat_id) -> None:
    increment_used(chat_id)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ ---

def get_user_mode(chat_id: int) -> str:
    info = user_tariffs.get(chat_id)
    if not info:
        return "short_friend"
    if info["end"] < datetime.date.today():
        user_tariffs.pop(chat_id, None)
        return "short_friend"
    return TARIFF_MODES.get(info["tariff"], "short_friend")

# --- –†–µ–∂–∏–º—ã –æ–±—â–µ–Ω–∏—è ---

MODES = {
    "short_friend": {
        "name": "–ö–æ—Ä–æ—Ç–∫–∏–π –¥—Ä—É–≥",
        "system_prompt": (
            "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–∞–∫ –±–ª–∏–∑–∫–∏–π –¥—Ä—É–≥. "
            "–û–±—â–∞–π—Å—è —Ç–µ–ø–ª–æ, –º—è–≥–∫–æ –∏ —ç–º–ø–∞—Ç–∏—á–Ω–æ. –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤—è–∑–Ω—ã–º –∏ "
            "–∑–∞–Ω–∏–º–∞—Ç—å –æ—Ç 5 –¥–æ 8 —Å—Ç—Ä–æ—á–µ–∫, 95% —Ç–µ–∫—Å—Ç–∞ ‚Äî —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, 5% ‚Äî "
            "–∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ü–µ. –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ "
            "–æ–¥–∏–Ω —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å. –ò–∑–±–µ–≥–∞–π –ª—é–±—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏, "
            "–º–µ–¥–∏—Ç–∞—Ü–∏—è–º–∏, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏ –∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏ ‚Äî –≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ "
            "–∂–∏–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä."
        ),
    },
    "philosopher": {
        "name": "–§–∏–ª–æ—Å–æ—Ñ",
        "system_prompt": (
            "–¢—ã ‚Äî –º—É–¥—Ä—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞—Ñ–æ—Ä—ã, –∏—Å—Ç–æ—Ä–∏–∏ –∏ "
            "—Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∑–≥–ª—è–Ω—É—Ç—å –≥–ª—É–±–∂–µ. –û—Ç–≤–µ—á–∞–π –æ—Ç 5 –¥–æ 8 "
            "—Å—Ç—Ä–æ—á–µ–∫, 95% —Ç–µ–∫—Å—Ç–∞ ‚Äî —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞, 5% ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π "
            "–≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ü–µ. –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–¥–∏–Ω —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ "
            "—Å–æ–æ–±—â–µ–Ω–∏—è. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, –º–µ–¥–∏—Ç–∞—Ü–∏–π, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö "
            "—Ç–µ—Ö–Ω–∏–∫ –∏–ª–∏ –ø–æ—à–∞–≥–æ–≤—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫ ‚Äî —Ç–æ–ª—å–∫–æ –∂–∏–≤–æ–π –¥–∏–∞–ª–æ–≥ –∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è."
        ),
    },
    "academic": {
        "name": "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π",
        "system_prompt": (
            "–¢—ã ‚Äî –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –æ–±—ä—è—Å–Ω—è—é—â–∏–π —á–µ—Ä–µ–∑ –Ω–∞—É–∫—É, –∫—É–ª—å—Ç—É—Ä—É, "
            "—á–∏—Å–ª–∞ –∏ —Å–∏–º–≤–æ–ª—ã. –°—Ç–∏–ª—å –∂–∏–≤–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –±–µ–∑ —Å—É—Ö–∏—Ö –ª–µ–∫—Ü–∏–π. "
            "–û—Ç–≤–µ—Ç—ã –∑–∞–Ω–∏–º–∞—é—Ç 5‚Äì8 —Å—Ç—Ä–æ—á–µ–∫ (95% ‚Äî –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞, 5% ‚Äî –≤–æ–ø—Ä–æ—Å "
            "–≤ –∫–æ–Ω—Ü–µ). –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–¥–∏–Ω —É—Ç–æ—á–Ω—è—é—â–∏–π "
            "–≤–æ–ø—Ä–æ—Å. –ò—Å–∫–ª—é—á–∏ –ª—é–±—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –º–µ–¥–∏—Ç–∞—Ü–∏—è–º, –¥—ã—Ö–∞–Ω–∏—é, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º "
            "–∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º. –í–µ–¥–∏ –¥–∏–∞–ª–æ–≥ –∫–∞–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ."
        ),
    },
}

TEST_BUTTONS = ["–î—Ä—É–≥", "–§–∏–ª–æ—Å–æ—Ñ", "–ê–∫–∞–¥–µ–º–∏–∫"]
TEST_BUTTON_CONFIG = {
    "–î—Ä—É–≥": ("üé≠", "short_friend"),
    "–§–∏–ª–æ—Å–æ—Ñ": ("üìö", "philosopher"),
    "–ê–∫–∞–¥–µ–º–∏–∫": ("üß≠", "academic"),
}

# --- GPT-5 Mini –æ—Ç–≤–µ—Ç —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –≤—ã–¥–∞—á–µ–π ---

EDIT_INTERVAL = 0.4             # –Ω–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–µ–∫)
FIRST_CHUNK_TOKENS = 12         # –ø–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤
STREAM_STALL_TIMEOUT = 30.0     # —É–≤–µ–ª–∏—á–∏–ª–∏ —Å 12.0, –¥–∞—ë–º —Å—Ç—Ä–∏–º—É –¥–æ 30 —Å–µ–∫—É–Ω–¥ —Ç–∏—à–∏–Ω—ã
MAX_RETRIES = 3                 # —É–≤–µ–ª–∏—á–∏–ª–∏ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ —Å 2 –¥–æ 3
BACKOFF_BASE = 1.0              # –±–∞–∑–æ–≤–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ retry (—Å–µ–∫)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ chat_id ‚Äî –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∏–º—ã –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ.
_chat_locks: dict[int, Lock] = {}
_logger = logging.getLogger("gpsbot.stream")
_logger.setLevel(logging.INFO)
Path("/root/GPS-Bot/logs").mkdir(parents=True, exist_ok=True)
# –Ω–∞—Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Å—Ç–æ–π file handler (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
fh = logging.FileHandler("/root/GPS-Bot/logs/stream_gpt.log")
fh.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(message)s"))
_logger.addHandler(fh)


def _coerce_content_to_text(content) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ OpenAI –∫ —Å—Ç—Ä–æ–∫–µ."""

    if content is None:
        return ""
    if isinstance(content, str):
        return content

    # –ù–æ–≤—ã–µ SDK –º–æ–≥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º text
    text_attr = getattr(content, "text", None)
    if isinstance(text_attr, str):
        return text_attr
    if text_attr is not None:
        return _coerce_content_to_text(text_attr)

    if isinstance(content, list):
        parts = [_coerce_content_to_text(item) for item in content]
        return "".join(parts)

    if isinstance(content, dict):
        if isinstance(content.get("text"), str):
            return content.get("text", "")
        if "content" in content:
            return _coerce_content_to_text(content["content"])
        if "value" in content:
            return _coerce_content_to_text(content["value"])

    return str(content)


def _extract_message_text(message) -> str:
    if message is None:
        return ""

    if isinstance(message, dict):
        return _coerce_content_to_text(message.get("content"))

    content = getattr(message, "content", None)
    text = _coerce_content_to_text(content)
    if text:
        return text

    # fallback: –∏–Ω–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –ª–µ–∂–∞—Ç—å –≤ message.text
    return _coerce_content_to_text(getattr(message, "text", ""))


def _get_chat_lock(chat_id: int) -> Lock:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∏ —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) Lock –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞."""
    lock = _chat_locks.get(chat_id)
    if lock is None:
        lock = Lock()
        _chat_locks[chat_id] = lock
    return lock


def _safe_get_delta_content(chunk) -> str | None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏–∑ stream-chunk.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
     - chunk.choices[0].delta.content (–æ–±—ã—á–Ω–æ –¥–ª—è incremental stream)
     - chunk.choices[0].message.content (–∏–Ω–æ–≥–¥–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ message)
     - dict-like —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç —Ä–∞–∑–Ω—ã—Ö SDK
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–ª–∏ None.
    """
    try:
        # 1) new style: chunk.choices[0].delta.content
        delta = getattr(getattr(chunk, "choices", [None])[0], "delta", None)
        if delta is not None:
            # –æ–±—ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            content = _coerce_content_to_text(getattr(delta, "content", None))
            if content:
                return content
            # dict-like delta
            if isinstance(delta, dict):
                c = _coerce_content_to_text(delta.get("content"))
                if c:
                    return c

        # 2) sometimes final message is in choices[0].message.content
        choice0 = None
        try:
            choice0 = chunk.choices[0]
        except Exception:
            pass

        if choice0 is not None:
            # try object-style message
            msg = getattr(choice0, "message", None)
            if msg is not None:
                content = _coerce_content_to_text(getattr(msg, "content", None))
                if content:
                    return content
                if isinstance(msg, dict):
                    c = _coerce_content_to_text(msg.get("content"))
                    if c:
                        return c

        # 3) dict-like root fallback: chunk["choices"][0]["message"]["content"] or delta
        if isinstance(chunk, dict):
            try:
                ch0 = chunk.get("choices", [None])[0]
                if ch0:
                    # prefer delta.content
                    d = ch0.get("delta")
                    if isinstance(d, dict):
                        c = _coerce_content_to_text(d.get("content"))
                        if c:
                            return c
                    # then try message.content
                    m = ch0.get("message")
                    if isinstance(m, dict):
                        c = _coerce_content_to_text(m.get("content"))
                        if c:
                            return c
            except Exception:
                pass

    except Exception:
        return None

    return None


def stream_gpt_answer(chat_id: int, user_text: str, mode_key: str = "short_friend") -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ GPT-5 mini –±–µ–∑ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∏ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç.
    –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Å—Ç–∞–≤–∞–ª—Å—è —Å ¬´‚Ä¶¬ª.
    """
    lock = _get_chat_lock(chat_id)
    if not lock.acquire(blocking=False):
        with suppress(Exception):
            bot.send_message(chat_id, "‚ö†Ô∏è –£–∂–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        history = user_histories.get(chat_id, [])
        history.append({"role": "user", "content": user_text})
        short_history = history[-6:]
        system_prompt = MODES[mode_key]["system_prompt"]
        messages = [{"role": "system", "content": system_prompt}] + short_history

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–ø–µ—á–∞—Ç–∞–µ—Ç..."
        show_typing(chat_id)
        draft = bot.send_message(chat_id, "‚Ä¶", reply_markup=main_menu())
        msg_id = draft.message_id

        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π (–Ω–µ—Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π) –∑–∞–ø—Ä–æ—Å –∫ GPT
        try:
            resp = client.chat.completions.create(
                model=CHAT_MODEL,
                messages=messages,
                stream=False,
                max_completion_tokens=800  # –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —É–º–µ—â–∞—é—Ç—Å—è –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏
            )
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            final_text = _extract_message_text(resp.choices[0].message).strip()
            if not final_text:
                final_text = "‚ö†Ô∏è –û—Ç–≤–µ—Ç –ø—É—Å—Ç."
        except Exception as e:
            import traceback

            print("‚ùå –û—à–∏–±–∫–∞ GPT:", e)
            traceback.print_exc()
            _logger.exception("Non-stream call failed")
            final_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.edit_message_text(final_text, chat_id, msg_id, parse_mode="HTML")
        except Exception:
            with suppress(Exception):
                bot.send_message(chat_id, final_text, parse_mode="HTML")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        short_history.append({"role": "assistant", "content": final_text})
        user_histories[chat_id] = short_history[-6:]

    finally:
        with suppress(Exception):
            lock.release()

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@bot.message_handler(commands=["start"])
def start(m):
    send_subscription_prompt(m.chat.id, m.from_user.id)


@bot.message_handler(commands=["publish"])
def publish(m):
    if not is_owner(m.from_user.id):
        bot.reply_to(m, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –æ–∫–Ω–∞.")
        return

    try:
        send_start_window(CHANNEL_USERNAME)
    except Exception as exc:
        bot.reply_to(m, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ: {exc}")
        return

    bot.send_message(
        m.chat.id,
        "–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ. –ó–∞–∫—Ä–µ–ø–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.",
    )


@bot.callback_query_handler(func=lambda call: call.data == "check_and_open")
def check_and_open(call):
    was_verified = call.from_user.id in verified_users

    if ensure_verified(call.message.chat.id, call.from_user.id, remind=False, force_check=True):
        if was_verified:
            bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        else:
            bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
            send_subscription_confirmed(call.message.chat.id)

        send_welcome_menu(call.message.chat.id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        send_subscription_reminder(call.message.chat.id, call.from_user.id, force=True)

@bot.message_handler(func=lambda msg: msg.text == "–ß–µ–∫-–∏–Ω")
def mood_start(m):
    if not check_limit(m.chat.id): return
    increment_counter(m.chat.id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4, one_time_keyboard=True)
    kb.add("üòä", "üòü", "üò¥", "üò°")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    send_and_store(m.chat.id, "–í—ã–±–µ—Ä–∏ —Å–º–∞–π–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±–ª–∏–∂–µ –∫ —Ç–≤–æ–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text in ["üòä", "üòü", "üò¥", "üò°"])
def mood_save(m):
    if not check_limit(m.chat.id): return
    increment_counter(m.chat.id)
    user_moods.setdefault(m.chat.id, []).append(m.text)
    send_and_store(m.chat.id, f"–ü—Ä–∏–Ω—è–ª {m.text}. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–º–µ—Ç–∫—É!", reply_markup=main_menu())


@bot.message_handler(func=lambda msg: msg.text == "–û—á–∏—Å—Ç–∏—Ç—å")
def cmd_clear(msg):
    if not ensure_verified(msg.chat.id, msg.from_user.id, force_check=True):
        return

    clear_history(msg.chat.id)
    user_histories.pop(msg.chat.id, None)
    user_messages.pop(msg.chat.id, None)
    user_test_modes.pop(msg.chat.id, None)

    send_and_store(msg.chat.id, "üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞", reply_markup=main_menu())


@bot.message_handler(func=lambda msg: msg.text and msg.text.startswith("Lang"))
def cmd_language(msg):
    if not ensure_verified(msg.chat.id, msg.from_user.id, force_check=True):
        return

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru"))
    kb.add(types.InlineKeyboardButton("English üá¨üáß", callback_data="lang_en"))
    kb.add(types.InlineKeyboardButton("‰∏≠Êñá üá®üá≥", callback_data="lang_zh"))

    bot.send_message(msg.chat.id, "üåê Choose your language:", reply_markup=kb)


@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def on_language_change(call):
    if not ensure_verified(call.message.chat.id, call.from_user.id, force_check=True):
        bot.answer_callback_query(call.id, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞")
        return

    lang = call.data.split("_", 1)[1]
    set_language(call.message.chat.id, lang)

    names = {"ru": "–†—É—Å—Å–∫–∏–π üá∑üá∫", "en": "English üá¨üáß", "zh": "‰∏≠Êñá üá®üá≥"}
    chosen = names.get(lang, lang)
    bot.answer_callback_query(call.id, f"Language set: {chosen}")
    send_and_store(call.message.chat.id, f"‚úÖ Now I will talk in {chosen}", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "–°—Ç–∞—Ç–∞")
def stats(m):
    if not check_limit(m.chat.id): return
    increment_counter(m.chat.id)
    moods = user_moods.get(m.chat.id, [])
    counts = {e: moods.count(e) for e in ["üòä", "üòü", "üò¥", "üò°"]}
    send_and_store(
        m.chat.id,
        f"üìä <b>–¢–≤–æ—è –Ω–µ–¥–µ–ª—è</b>\n"
        f"üòä –†–∞–¥–æ—Å—Ç—å: {counts['üòä']}\n"
        f"üòü –¢—Ä–µ–≤–æ–≥–∞: {counts['üòü']}\n"
        f"üò¥ –£—Å—Ç–∞–ª–æ—Å—Ç—å: {counts['üò¥']}\n"
        f"üò° –ó–ª–æ—Å—Ç—å: {counts['üò°']}",
        reply_markup=main_menu(),
    )

@bot.message_handler(func=lambda msg: msg.text == "–û–ø–ª–∞—Ç–∞")
def pay_button(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    send_and_store(
        m.chat.id,
        get_info_text(),
        reply_markup=info_keyboard(),
    )
    send_and_store(
        m.chat.id,
        "–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ üëá",
        reply_markup=pay_menu()
    )


@bot.message_handler(
    func=lambda msg: msg.text in [
        "–°–æ–∑–≤—É—á–∏–µ ‚Ä¢ –∏–∫–æ–Ω–∫–∏ ‚Äî 299 ‚ÇΩ",
        "–û—Ç—Ä–∞–∂–µ–Ω–∏–µ ‚Ä¢ –∞–≤–∞—Ç–∞—Ä–∫–∏ ‚Äî 999 ‚ÇΩ",
        "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ ‚Ä¢ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ñ–æ–Ω—ã ‚Äî 1999 ‚ÇΩ",
    ]
)
def tariffs(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    if "–°–æ–∑–≤—É—á–∏–µ" in m.text:
        url = PAY_URL_HARMONY
    elif "–û—Ç—Ä–∞–∂–µ–Ω–∏–µ" in m.text:
        url = PAY_URL_REFLECTION
    else:
        url = PAY_URL_TRAVEL

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ üí≥", url=url))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))

    send_and_store(m.chat.id, f"–¢—ã –≤—ã–±—Ä–∞–ª: {m.text}", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back_to_menu(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    send_and_store(m.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


@bot.callback_query_handler(func=lambda call: call.data == "back")
def callback_back(call):
    bot.answer_callback_query(call.id)

    if not ensure_verified(call.message.chat.id, call.from_user.id, force_check=True):
        return

    send_and_store(
        call.message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )


@bot.callback_query_handler(func=lambda call: call.data == "back_to_menu")
def callback_back_to_menu(call):
    bot.answer_callback_query(call.id)

    if not ensure_verified(call.message.chat.id, call.from_user.id, force_check=True):
        return

    send_and_store(
        call.message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ ---
@bot.message_handler(commands=["tariffs"])
def show_tariffs(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    text = "üìú <b>–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø—É—Ç—å</b>\n\n"
    for key, t in TARIFFS.items():
        text += f"{t['name']} ‚Äî {t['price']} ‚ÇΩ/–º–µ—Å.\n{t['description']}\n\n"

    kb = types.InlineKeyboardMarkup(row_width=1)
    for key, t in TARIFFS.items():
        kb.add(
            types.InlineKeyboardButton(
                f"{t['name']} ‚Ä¢ {t['price']} ‚ÇΩ", url=t["pay_url"]
            )
        )

    send_and_store(m.chat.id, text, reply_markup=kb)

# --- –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–∞ ---
@bot.message_handler(commands=["activate"])
def activate(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    parts = m.text.split()
    if len(parts) < 2:
        send_and_store(
            m.chat.id,
            "‚ùå –£–∫–∞–∂–∏ —Ç–∞—Ä–∏—Ñ: sozvuchie, otrazhenie –∏–ª–∏ puteshestvie",
        )
        return

    tariff_key = parts[1]
    _reward, msg = activate_tariff(m.chat.id, tariff_key)
    send_and_store(m.chat.id, msg)

# --- –ü–æ–¥—Å–∫–∞–∑–∫–∞ ---
@bot.message_handler(commands=["hint"])
def hint(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    parts = m.text.split()
    if len(parts) < 3:
        send_and_store(
            m.chat.id, "‚ùå –£–∫–∞–∂–∏ —Ç–∞—Ä–∏—Ñ –∏ —à–∞–≥ –ø–æ–¥—Å–∫–∞–∑–∫–∏: /hint sozvuchie 0"
        )
        return

    tariff_key, step = parts[1], int(parts[2])
    hint_text = get_hint(TARIFFS[tariff_key]["category"], step)
    send_and_store(m.chat.id, f"üîÆ –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint_text}")

@bot.message_handler(
    func=lambda msg: any(
        word in msg.text.lower()
        for word in [
            "–∫—Ç–æ —Ç—ã",
            "—á—Ç–æ —Ç—ã",
            "–∫–∞–∫–∞—è –≤–µ—Ä—Å–∏—è",
            "—Ç–≤–æ—è –≤–µ—Ä—Å–∏—è",
            "–≤–µ—Ä—Å–∏—è –≥–ø—Ç",
            "–∫–∞–∫–∞—è –º–æ–¥–µ–ª—å",
            "—Ç–≤–æ—è –º–æ–¥–µ–ª—å",
            "–º–æ–¥–µ–ª—å –≥–ø—Ç",
            "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
            "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
            "gpt",
        ]
    )
)
def who_are_you(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    text = (
        "–Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –±–∞–∑–µ GPT-5, –Ω–æ–≤–µ–π—à–µ–π –º–æ–¥–µ–ª–∏. "
        "GPT-5 –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫—É—é –ø—Ä–æ—Ä–∞–±–æ—Ç–∫—É –¥–∏–∞–ª–æ–≥–∞, –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å "
        "–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å, –æ–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. "
        "–ú–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è: –ö–æ—Ä–æ—Ç–∫–∏–π –¥—Ä—É–≥, –§–∏–ª–æ—Å–æ—Ñ –∏ –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π. "
        "–û–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Å—Ç–∏ –∂–∏–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä, –¥–∞–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã "
        "–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏. "
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPT-5 –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã, "
        "–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –≤ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–µ –∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π."
    )
    bot.send_message(m.chat.id, text, reply_markup=main_menu())

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ ---
def background_checker():
    counter = 0
    while True:
        check_expiring_tariffs(bot)

        if counter % 7 == 0:
            user_histories.clear()
            for chat_id, msgs in user_messages.items():
                for msg_id in msgs:
                    try:
                        bot.delete_message(chat_id, msg_id)
                    except Exception:
                        pass
            user_messages.clear()
            for chat_id in iter_history_chat_ids():
                clear_history(chat_id)
            print("üßπ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")

        counter += 1
        time.sleep(86400)  # —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

# --- –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã ---
@bot.message_handler(commands=["testmodes"])
def test_modes_menu(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    kb = types.InlineKeyboardMarkup(row_width=1)
    for title in TEST_BUTTONS:
        emoji, mode_key = TEST_BUTTON_CONFIG[title]
        kb.add(
            types.InlineKeyboardButton(
                f"{emoji} {title} (2 —Å–æ–æ–±—â–µ–Ω–∏—è)",
                callback_data=f"test_{mode_key}",
            )
        )
    bot.send_message(
        m.chat.id,
        "üîç –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:\n–ö–∞–∂–¥—ã–π –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è.",
        reply_markup=kb
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("test_"))
def run_test_mode(call):
    if not ensure_verified(call.message.chat.id, call.from_user.id, force_check=True):
        bot.answer_callback_query(call.id)
        return

    mode_key = call.data.replace("test_", "")
    if call.message.chat.id not in user_test_mode_usage:
        user_test_mode_usage[call.message.chat.id] = {
            "short_friend": 0,
            "philosopher": 0,
            "academic": 0,
        }
        user_test_modes[call.message.chat.id] = "academic"

    if user_test_mode_usage[call.message.chat.id][mode_key] >= 2:
        bot.answer_callback_query(call.id, "‚ùå –õ–∏–º–∏—Ç 2 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –∏—Å—á–µ—Ä–ø–∞–Ω.")
        return

    bot.answer_callback_query(call.id, f"‚úÖ –ü—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º {MODES[mode_key]['name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    bot.send_message(call.message.chat.id, f"–°–ø—Ä–æ—Å–∏ –º–µ–Ω—è —á—Ç–æ-—Ç–æ –≤ —Ä–µ–∂–∏–º–µ <b>{MODES[mode_key]['name']}</b> üëá")

    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω
    clear_history(call.message.chat.id)
    user_histories[call.message.chat.id] = []
    user_test_mode_usage[call.message.chat.id][mode_key] += 1
    user_test_modes[call.message.chat.id] = mode_key

# --- fallback ‚Äî –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–ª —Å –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT ---
@bot.message_handler(func=lambda msg: True)
def fallback(m):
    if not check_limit(m.chat.id): return
    increment_counter(m.chat.id)
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    mode_key = user_test_modes.get(m.chat.id)
    if mode_key and mode_key in user_test_mode_usage.get(m.chat.id, {}):
        if user_test_mode_usage[m.chat.id][mode_key] < 2:
            stream_gpt_answer(m.chat.id, m.text, mode_key)
            user_test_mode_usage[m.chat.id][mode_key] += 1
            if user_test_mode_usage[m.chat.id][mode_key] >= 2:
                user_test_modes.pop(m.chat.id, None)
            return
        else:
            user_test_modes.pop(m.chat.id, None)

    mode = get_user_mode(m.chat.id)
    stream_gpt_answer(m.chat.id, m.text, mode)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    from worker_media import start_media_worker
    from worker_payments import start_payments_worker

    start_media_worker()
    start_payments_worker()
    threading.Thread(target=background_checker, daemon=True).start()

    try:
        bot.infinity_polling(
            timeout=60,
            long_polling_timeout=60,
            skip_pending=True,
        )
    except Exception as e:
        print("CRITICAL: polling crashed:", e)
        raise



