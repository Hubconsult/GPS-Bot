import re
import threading
import time
import datetime
from pathlib import Path
from typing import Set

from storage import init_db, get_used_free, increment_used
from telebot import types

# Tariff configuration and state tracking
from tariffs import (
    TARIFFS,
    TARIFF_MODES,
    user_tariffs,
    activate_tariff,
    check_expiring_tariffs,
)
from hints import get_hint

# Ensure media handlers are registered
import media

# --- –ö–æ–Ω—Ñ–∏–≥: –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ settings.py ---
from settings import (
    bot,
    client,
    FREE_LIMIT,
    HISTORY_LIMIT,
    is_owner,
    PAY_URL_HARMONY,
    PAY_URL_REFLECTION,
    PAY_URL_TRAVEL,
    SYSTEM_PROMPT,
)

# Initialize the SQLite storage before handling any requests
init_db()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ ---
CHANNEL_USERNAME = "@GPT5_Navigator"
CHANNEL_URL = "https://t.me/GPT5_Navigator"
BOT_DEEP_LINK = "https://t.me/VnutrenniyGPS_bot"
PHOTO_FILE = Path(__file__).resolve().parent / "5371038341350424631-1280x720.png"

# --- –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_moods = {}
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_histories = {}  # {chat_id: [ {role: "user"/"assistant", content: "..."}, ... ]}
user_messages = {}  # {chat_id: [message_id, ...]}

# –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω–∏–∫ –ø–æ —Ä–µ–∂–∏–º–∞–º
user_test_modes = {}  # {chat_id: {"short_friend": 0, "philosopher": 0, "academic": 0}}
# –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
active_test_modes = {}  # {chat_id: mode_key}

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ ---
verified_users: Set[int] = set()
pending_verification: Set[int] = set()


def has_channel_subscription(user_id: int) -> bool:
    try:
        status = bot.get_chat_member(CHANNEL_USERNAME, user_id).status
    except Exception:
        return False
    return status in {"member", "administrator", "creator"}


def subscription_check_keyboard() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É", callback_data="check_and_open"))
    return kb


def send_subscription_prompt(chat_id: int, user_id: int) -> None:
    caption = (
        "<b>GPT-5 –ù–∞–≤–∏–≥–∞—Ç–æ—Ä</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –≠—Ç–æ —Ç–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π GPS.\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Äî Psychological Astrologer: –ø–æ–∏—Å–∫ —Å–º—ã—Å–ª–æ–≤ –≤ –∫–∞—Ä—Ç–µ –∂–∏–∑–Ω–∏\n"
        "‚Äî Spiritual Psychologist: –ø–æ–Ω–∏–º–∞–Ω–∏–µ –≥–ª—É–±–∏–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥—É—à–∏\n"
        "‚Äî Psychological Numerologist: —á–∏—Å–ª–∞ –∫–∞–∫ –∫–ª—é—á–∏ –∫ —Å—É–¥—å–±–µ\n"
        "‚Äî –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7, —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –∏ –¥—Ä—É–∂–µ—Å–∫–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã\n"
        "‚Äî –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏\n\n"
        "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª."
    )

    keyboard = subscription_check_keyboard()

    try:
        with PHOTO_FILE.open("rb") as photo:
            bot.send_photo(chat_id, photo, caption=caption, reply_markup=keyboard)
    except FileNotFoundError:
        bot.send_message(chat_id, caption, reply_markup=keyboard)

    pending_verification.add(user_id)


def send_subscription_reminder(chat_id: int, user_id: int, *, force: bool = False) -> None:
    if not force and user_id in pending_verification:
        return

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_URL))
    kb.add(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_and_open"))

    bot.send_message(
        chat_id,
        (
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @GPT5_Navigator.\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª."
        ),
        reply_markup=kb,
    )

    pending_verification.add(user_id)


def send_subscription_confirmed(chat_id: int) -> None:
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞", url=BOT_DEEP_LINK))
    bot.send_message(
        chat_id,
        "–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É.",
        reply_markup=kb,
    )


def ensure_verified(
    chat_id: int,
    user_id: int,
    *,
    remind: bool = True,
    force_check: bool = False,
) -> bool:
    if not force_check and user_id in verified_users:
        return True

    if has_channel_subscription(user_id):
        verified_users.add(user_id)
        pending_verification.discard(user_id)
        return True

    verified_users.discard(user_id)

    if remind:
        send_subscription_reminder(chat_id, user_id)

    return False


def send_and_store(chat_id, text, **kwargs):
    msg = bot.send_message(chat_id, text, **kwargs)
    user_messages.setdefault(chat_id, []).append(msg.message_id)
    return msg

# --- –û–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---


def send_welcome_menu(chat_id: int) -> None:
    user_moods[chat_id] = []
    text = (
        "<b>–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π GPS</b>\n"
        "‚óè online\n\n"
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø —Ç–≤–æ–π –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π GPS!"
    )
    send_and_store(chat_id, text, reply_markup=main_menu())

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    kb.add("–ß–µ–∫-–∏–Ω", "–°—Ç–∞—Ç–∞", "–û–ø–ª–∞—Ç–∞", "–ú–µ–¥–∏–∞")
    return kb


def pay_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    kb.add("üå± –°–æ–∑–≤—É—á–∏–µ ‚Äî 299 ‚ÇΩ")
    kb.add("üåø –û—Ç—Ä–∞–∂–µ–Ω–∏–µ ‚Äî 999 ‚ÇΩ")
    kb.add("üåå –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ ‚Äî 1999 ‚ÇΩ")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def pay_inline():
    kb = types.InlineKeyboardMarkup(row_width=1)
    for key, t in TARIFFS.items():
        kb.add(
            types.InlineKeyboardButton(
                f"{t['name']} ‚Ä¢ {t['price']} ‚ÇΩ", url=t["pay_url"]
            )
        )
    return kb

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ ---

def check_limit(chat_id) -> bool:
    if is_owner(chat_id):
        return True

    if not ensure_verified(chat_id, chat_id, force_check=True):
        return False

    used = get_used_free(chat_id)
    if used >= FREE_LIMIT:
        bot.send_message(
            chat_id,
            "üö´ <b>–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω.</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ üëá",
            reply_markup=pay_inline(),
        )
        return False
    return True

# --- Helpers ---

def increment_counter(chat_id) -> None:
    increment_used(chat_id)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ ---

def get_user_mode(chat_id: int) -> str:
    info = user_tariffs.get(chat_id)
    if not info:
        return "short_friend"
    if info["end"] < datetime.date.today():
        user_tariffs.pop(chat_id, None)
        return "short_friend"
    return TARIFF_MODES.get(info["tariff"], "short_friend")

# --- –û–±—Ä–µ–∑–∞–µ–º –æ—Ç–≤–µ—Ç GPT –¥–æ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π ---

def force_short_reply(text: str) -> str:
    sentences = re.split(r'(?<=[.?!])\s+', text)
    return " ".join(sentences[:2]).strip()


# --- –†–µ–∂–∏–º—ã –æ–±—â–µ–Ω–∏—è ---

MODES = {
    "short_friend": {
        "name": "–ö–æ—Ä–æ—Ç–∫–∏–π –¥—Ä—É–≥",
        "system_prompt": (
            "–¢—ã ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. "
            "–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –±—ã—Å—Ç—Ä–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (3‚Äì5 —Å—Ç—Ä–æ–∫). "
            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª–∏–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, —Å–ø–∏—Å–∫–æ–≤ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤. "
            "–í –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–¥–∏–Ω –ª—ë–≥–∫–∏–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥. "
            "–û–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –±–ª–∏–∑–∫–∏–º –¥—Ä—É–≥–æ–º."
        ),
    },
    "philosopher": {
        "name": "–§–∏–ª–æ—Å–æ—Ñ",
        "system_prompt": (
            "–¢—ã ‚Äî —Ñ–∏–ª–æ—Å–æ—Ñ. "
            "–í–µ–¥–∏ –¥–∏–∞–ª–æ–≥ –≤ —Å—Ç–∏–ª–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π: –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞—Ñ–æ—Ä—ã, –∏—Å—Ç–æ—Ä–∏–∏, –ø—Ä–∏–º–µ—Ä—ã. "
            "–ü–µ—Ä–≤—ã–µ 3‚Äì5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. "
            "–ù–µ –¥–∞–≤–∞–π —Å–æ–≤–µ—Ç —Å—Ä–∞–∑—É ‚Äî –æ–Ω –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–≥–¥–∞ —è—Å–Ω–µ–µ –ø–æ–Ω—è—Ç–Ω–∞ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. "
            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ —Å–ª–æ–≤ –≤—Ä–æ–¥–µ ¬´–°–æ–≤–µ—Ç:¬ª. "
            "–û—Ç–≤–µ—á–∞–π —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ –∏ –æ–±—Ä–∞–∑–Ω–æ, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ –∑–∞–¥—É–º–∞—Ç—å—Å—è."
        ),
    },
    "academic": {
        "name": "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π",
        "system_prompt": (
            "–¢—ã ‚Äî –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. "
            "–û–±—â–∞–π—Å—è –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º –∏ –¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —à–∏—Ä–æ–∫–∏–π –∫—Ä—É–≥ –∑–Ω–∞–Ω–∏–π: "
            "–Ω–∞—É—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏, —Å–∏–º–≤–æ–ª–∏–∫—É, —á–∏—Å–ª–∞, –∞ —Ç–∞–∫–∂–µ –∂–∏—Ç–µ–π—Å–∫–∏–π –æ–ø—ã—Ç. "
            "–ü–µ—Ä–≤—ã–µ 3‚Äì5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω—ã –≤–∫–ª—é—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑, –ø–æ—è—Å–Ω–µ–Ω–∏—è –∏ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. "
            "–°–æ–≤–µ—Ç –¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Å–æ–±—Ä–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ç–∞–ª–µ–π. "
            "–°–æ–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–º –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –Ω–æ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤. "
            "–í—Å—ë –¥–æ–ª–∂–Ω–æ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ –∂–∏–≤–æ–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥."
        ),
    },
}

# --- GPT-5 Mini –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π ---

def gpt_answer(chat_id: int, user_text: str, mode_key: str = "short_friend") -> str:
    try:
        history = user_histories.get(chat_id, [])
        history.append({"role": "user", "content": user_text})
        history = history[-10:]
        user_histories[chat_id] = history

        system_prompt = MODES[mode_key]["system_prompt"]

        messages = [{"role": "system", "content": system_prompt}] + history

        response = client.chat.completions.create(
            model="gpt-5-mini",
            messages=messages,
        )

        reply = response.choices[0].message.content.strip()
        history.append({"role": "assistant", "content": reply})
        user_histories[chat_id] = history[-10:]

        return reply
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT: {e}"

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@bot.message_handler(commands=["start"])
def start(m):
    if ensure_verified(m.chat.id, m.from_user.id, remind=False, force_check=True):
        send_welcome_menu(m.chat.id)
    else:
        send_subscription_prompt(m.chat.id, m.from_user.id)


@bot.callback_query_handler(func=lambda call: call.data == "check_and_open")
def check_and_open(call):
    was_verified = call.from_user.id in verified_users

    if ensure_verified(call.message.chat.id, call.from_user.id, remind=False, force_check=True):
        if was_verified:
            bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        else:
            bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
            send_subscription_confirmed(call.message.chat.id)

        send_welcome_menu(call.message.chat.id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        send_subscription_reminder(call.message.chat.id, call.from_user.id, force=True)

@bot.message_handler(func=lambda msg: msg.text == "–ß–µ–∫-–∏–Ω")
def mood_start(m):
    if not check_limit(m.chat.id): return
    increment_counter(m.chat.id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4, one_time_keyboard=True)
    kb.add("üòä", "üòü", "üò¥", "üò°")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    send_and_store(m.chat.id, "–í—ã–±–µ—Ä–∏ —Å–º–∞–π–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±–ª–∏–∂–µ –∫ —Ç–≤–æ–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text in ["üòä", "üòü", "üò¥", "üò°"])
def mood_save(m):
    if not check_limit(m.chat.id): return
    increment_counter(m.chat.id)
    user_moods.setdefault(m.chat.id, []).append(m.text)
    send_and_store(m.chat.id, f"–ü—Ä–∏–Ω—è–ª {m.text}. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–º–µ—Ç–∫—É!", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "–°—Ç–∞—Ç–∞")
def stats(m):
    if not check_limit(m.chat.id): return
    increment_counter(m.chat.id)
    moods = user_moods.get(m.chat.id, [])
    counts = {e: moods.count(e) for e in ["üòä", "üòü", "üò¥", "üò°"]}
    send_and_store(
        m.chat.id,
        f"üìä <b>–¢–≤–æ—è –Ω–µ–¥–µ–ª—è</b>\n"
        f"üòä –†–∞–¥–æ—Å—Ç—å: {counts['üòä']}\n"
        f"üòü –¢—Ä–µ–≤–æ–≥–∞: {counts['üòü']}\n"
        f"üò¥ –£—Å—Ç–∞–ª–æ—Å—Ç—å: {counts['üò¥']}\n"
        f"üò° –ó–ª–æ—Å—Ç—å: {counts['üò°']}",
        reply_markup=main_menu(),
    )

@bot.message_handler(func=lambda msg: msg.text == "–û–ø–ª–∞—Ç–∞")
def pay_button(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    send_and_store(
        m.chat.id,
        "–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ üëá",
        reply_markup=pay_menu()
    )


@bot.message_handler(
    func=lambda msg: msg.text in [
        "üå± –°–æ–∑–≤—É—á–∏–µ ‚Äî 299 ‚ÇΩ",
        "üåø –û—Ç—Ä–∞–∂–µ–Ω–∏–µ ‚Äî 999 ‚ÇΩ",
        "üåå –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ ‚Äî 1999 ‚ÇΩ",
    ]
)
def tariffs(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    if "–°–æ–∑–≤—É—á–∏–µ" in m.text:
        url = PAY_URL_HARMONY
    elif "–û—Ç—Ä–∞–∂–µ–Ω–∏–µ" in m.text:
        url = PAY_URL_REFLECTION
    else:
        url = PAY_URL_TRAVEL

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ üí≥", url=url))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))

    send_and_store(m.chat.id, f"–¢—ã –≤—ã–±—Ä–∞–ª: {m.text}", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back_to_menu(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    send_and_store(m.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


@bot.callback_query_handler(func=lambda call: call.data == "back")
def callback_back(call):
    bot.answer_callback_query(call.id)

    if not ensure_verified(call.message.chat.id, call.from_user.id, force_check=True):
        return

    send_and_store(
        call.message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ ---
@bot.message_handler(commands=["tariffs"])
def show_tariffs(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    text = "üìú <b>–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø—É—Ç—å</b>\n\n"
    for key, t in TARIFFS.items():
        text += f"{t['name']} ‚Äî {t['price']} ‚ÇΩ/–º–µ—Å.\n{t['description']}\n\n"

    kb = types.InlineKeyboardMarkup(row_width=1)
    for key, t in TARIFFS.items():
        kb.add(
            types.InlineKeyboardButton(
                f"{t['name']} ‚Ä¢ {t['price']} ‚ÇΩ", url=t["pay_url"]
            )
        )

    send_and_store(m.chat.id, text, reply_markup=kb)

# --- –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–∞ ---
@bot.message_handler(commands=["activate"])
def activate(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    parts = m.text.split()
    if len(parts) < 2:
        send_and_store(
            m.chat.id,
            "‚ùå –£–∫–∞–∂–∏ —Ç–∞—Ä–∏—Ñ: sozvuchie, otrazhenie –∏–ª–∏ puteshestvie",
        )
        return

    tariff_key = parts[1]
    reward, msg = activate_tariff(m.chat.id, tariff_key)
    if reward:
        send_and_store(m.chat.id, f"{msg}\n\n–¢–≤–æ—è –ø–µ—Ä–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {reward}")
    else:
        send_and_store(m.chat.id, msg)

# --- –ü–æ–¥—Å–∫–∞–∑–∫–∞ ---
@bot.message_handler(commands=["hint"])
def hint(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    parts = m.text.split()
    if len(parts) < 3:
        send_and_store(
            m.chat.id, "‚ùå –£–∫–∞–∂–∏ —Ç–∞—Ä–∏—Ñ –∏ —à–∞–≥ –ø–æ–¥—Å–∫–∞–∑–∫–∏: /hint sozvuchie 0"
        )
        return

    tariff_key, step = parts[1], int(parts[2])
    hint_text = get_hint(TARIFFS[tariff_key]["category"], step)
    send_and_store(m.chat.id, f"üîÆ –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint_text}")

@bot.message_handler(
    func=lambda msg: any(
        word in msg.text.lower()
        for word in [
            "–∫—Ç–æ —Ç—ã",
            "—á—Ç–æ —Ç—ã",
            "–∫–∞–∫–∞—è –≤–µ—Ä—Å–∏—è",
            "—Ç–≤–æ—è –≤–µ—Ä—Å–∏—è",
            "–≤–µ—Ä—Å–∏—è –≥–ø—Ç",
            "–∫–∞–∫–∞—è –º–æ–¥–µ–ª—å",
            "—Ç–≤–æ—è –º–æ–¥–µ–ª—å",
            "–º–æ–¥–µ–ª—å –≥–ø—Ç",
            "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
            "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
            "gpt",
        ]
    )
)
def who_are_you(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    text = (
        "–Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –±–∞–∑–µ GPT-5, –Ω–æ–≤–µ–π—à–µ–π –º–æ–¥–µ–ª–∏. "
        "GPT-5 –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫—É—é –ø—Ä–æ—Ä–∞–±–æ—Ç–∫—É –¥–∏–∞–ª–æ–≥–∞, –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å "
        "–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å, –æ–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. "
        "–ú–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è: –ö–æ—Ä–æ—Ç–∫–∏–π –¥—Ä—É–≥, –§–∏–ª–æ—Å–æ—Ñ –∏ –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π. "
        "–û–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Å—Ç–∏ –∂–∏–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä, –¥–∞–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã "
        "–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏. "
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPT-5 –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã, "
        "–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –≤ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–µ –∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π."
    )
    bot.send_message(m.chat.id, text, reply_markup=main_menu())

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ ---
def background_checker():
    counter = 0
    while True:
        check_expiring_tariffs(bot)

        if counter % 7 == 0:
            user_histories.clear()
            for chat_id, msgs in user_messages.items():
                for msg_id in msgs:
                    try:
                        bot.delete_message(chat_id, msg_id)
                    except Exception:
                        pass
            user_messages.clear()
            print("üßπ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")

        counter += 1
        time.sleep(86400)  # —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

# --- –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã ---
@bot.message_handler(commands=["testmodes"])
def test_modes_menu(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üé≠ –ö–æ—Ä–æ—Ç–∫–∏–π –¥—Ä—É–≥ (2 —Å–æ–æ–±—â–µ–Ω–∏—è)", callback_data="test_short_friend"),
        types.InlineKeyboardButton("üìö –§–∏–ª–æ—Å–æ—Ñ (2 —Å–æ–æ–±—â–µ–Ω–∏—è)", callback_data="test_philosopher"),
        types.InlineKeyboardButton("üß≠ –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π (2 —Å–æ–æ–±—â–µ–Ω–∏—è)", callback_data="test_academic"),
    )
    bot.send_message(
        m.chat.id,
        "üîç –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:\n–ö–∞–∂–¥—ã–π –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è.",
        reply_markup=kb
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("test_"))
def run_test_mode(call):
    if not ensure_verified(call.message.chat.id, call.from_user.id, force_check=True):
        bot.answer_callback_query(call.id)
        return

    mode_key = call.data.replace("test_", "")
    if call.message.chat.id not in user_test_modes:
        user_test_modes[call.message.chat.id] = {"short_friend": 0, "philosopher": 0, "academic": 0}

    if user_test_modes[call.message.chat.id][mode_key] >= 2:
        bot.answer_callback_query(call.id, "‚ùå –õ–∏–º–∏—Ç 2 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –∏—Å—á–µ—Ä–ø–∞–Ω.")
        return

    bot.answer_callback_query(call.id, f"‚úÖ –ü—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º {MODES[mode_key]['name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    bot.send_message(call.message.chat.id, f"–°–ø—Ä–æ—Å–∏ –º–µ–Ω—è —á—Ç–æ-—Ç–æ –≤ —Ä–µ–∂–∏–º–µ <b>{MODES[mode_key]['name']}</b> üëá")

    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω
    user_histories[call.message.chat.id] = [{"role": "system", "content": MODES[mode_key]["system_prompt"]}]
    user_test_modes[call.message.chat.id][mode_key] += 1
    active_test_modes[call.message.chat.id] = mode_key

# --- fallback ‚Äî –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–ª —Å –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT ---
@bot.message_handler(func=lambda msg: True)
def fallback(m):
    if not check_limit(m.chat.id): return
    increment_counter(m.chat.id)
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if m.chat.id in active_test_modes:
        mode_key = active_test_modes[m.chat.id]
        if user_test_modes[m.chat.id][mode_key] < 2:
            answer = gpt_answer(m.chat.id, m.text, mode_key)
            user_test_modes[m.chat.id][mode_key] += 1
            if user_test_modes[m.chat.id][mode_key] >= 2:
                active_test_modes.pop(m.chat.id, None)
            send_and_store(m.chat.id, answer, reply_markup=main_menu())
            return
        else:
            active_test_modes.pop(m.chat.id, None)

    mode = get_user_mode(m.chat.id)
    answer = gpt_answer(m.chat.id, m.text, mode)
    send_and_store(m.chat.id, answer, reply_markup=main_menu())

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    threading.Thread(target=background_checker, daemon=True).start()
    bot.infinity_polling(skip_pending=True)



