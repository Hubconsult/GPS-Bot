import logging
import re
import sys
import threading
import time
import traceback
from contextlib import suppress
from pathlib import Path
from threading import Lock

from storage import (
    init_db,
    clear_history,
    iter_history_chat_ids,
    load_history,
    save_history,
    r,
    TTL,
)
from telebot import types
from telebot.apihelper import ApiTelegramException

# Ensure media handlers are registered
import media
from media import multimedia_menu

# Register web search handlers (command /web)
import handlers.web  # noqa: F401 - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∏–º–ø–æ—Ä—Ç

from internet import ask_gpt_web, should_escalate_to_web, should_prefer_web

from bot_utils import show_typing

# --- RU-only links mapping: ONLY for final user-visible text (do not touch SDK objects) ---
def map_links_ru(text):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã,
    –∑–∞–º–µ–Ω—è–µ–º –∑–∞—Ä—É–±–µ–∂–Ω—ã–µ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –†–§ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.
    """
    if not isinstance(text, str) or "http" not in text:
        return text
    rules = [
        (r'https?://(?:www\.)?weather\.com[^\s)]+', 'https://yandex.ru/pogoda'),
        (r'https?://(?:en\.)?wikipedia\.org[^\s)]+', 'https://ru.wikipedia.org'),
        (r'https?://(?:www\.)?google\.com[^\s)]+',  'https://yandex.ru'),
        (r'https?://(?:www\.)?bbc\.com[^\s)]+',     'https://tass.ru'),
        (r'https?://(?:www\.)?cnn\.com[^\s)]+',     'https://ria.ru'),
    ]
    for pat, repl in rules:
        text = re.sub(pat, repl, text, flags=re.IGNORECASE)
    return text

# --- –ö–æ–Ω—Ñ–∏–≥: –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ settings.py ---
from settings import (
    bot,
    client,
    CHAT_MODEL,
    HISTORY_LIMIT,
    OWNER_ID,
    is_owner,
    SYSTEM_PROMPT,
)
from openai_adapter import (
    extract_response_text,
    prepare_responses_input,
)
from text_utils import sanitize_for_telegram, sanitize_model_output

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
import auto_post  # noqa: F401 - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ

from usage_tracker import (
    compose_display_name,
    format_usage_report,
    format_user_stats,
    init_usage_tracking,
    record_user_activity,
)

# Initialize the SQLite storage before handling any requests
init_db()
init_usage_tracking()


def _register_bot_commands() -> None:
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é Telegram."""

    owner_commands = [
        types.BotCommand("post_short", "–ö–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç"),
        types.BotCommand("post_long", "–î–ª–∏–Ω–Ω—ã–π –ø–æ—Å—Ç"),
        types.BotCommand("post_news", "–ù–æ–≤–æ—Å—Ç—å —Å —Ñ–æ—Ç–æ"),
        types.BotCommand("top_users", "–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        types.BotCommand("user_stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ ID"),
    ]

    try:
        with suppress(Exception):
            bot.delete_my_commands(scope=types.BotCommandScopeDefault())
            default_menu_cls = getattr(types, "MenuButtonDefault", None)
            if default_menu_cls:
                bot.set_chat_menu_button(menu_button=default_menu_cls())
            else:
                bot.set_chat_menu_button()
        bot.set_my_commands(
            owner_commands,
            scope=types.BotCommandScopeChat(chat_id=OWNER_ID),
        )
        menu_button_cls = getattr(types, "MenuButtonCommands", None)
        if menu_button_cls:
            bot.set_chat_menu_button(chat_id=OWNER_ID, menu_button=menu_button_cls())
    except Exception:
        pass


_register_bot_commands()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∑–∞–ø–∏—Å—å—é –≤ —Ñ–∞–π–ª ---
LOG_FILE = Path(__file__).resolve().parent / "gpsbot.log"

logging.basicConfig(
    filename=str(LOG_FILE),
    level=logging.ERROR,
    format="%(asctime)s [%(levelname)s] %(message)s",
)


def log_exception(exc: Exception) -> None:
    """Log unexpected polling exceptions both to stdout and a file."""
    tb = traceback.format_exc()
    msg = f"CRITICAL: polling crashed: {exc}\n{tb}"
    print(msg)
    logging.error(msg)
    sys.stdout.flush()


# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ ---
CHANNEL_USERNAME = "AI Systems"
CHANNEL_LINK = "https://t.me/SynteraAI"
CHANNEL_CHAT_ID = "@SynteraAI"
GROUP_NAME = "Hubconsult"
GROUP_LINK = "https://t.me/HubConsult"
GROUP_CHAT_ID = "@HubConsult"
BOT_DEEP_LINK = "https://t.me/SynteraGPT_bot"
PHOTO_FILE = Path(__file__).resolve().parent / "baner_dlya_perehoda.png"
START_CAPTION = (
    "<b>SynteraGPT</b>\n\n"
    "–ß–∞—Ç-–±–æ—Ç —Å –≤—ã—Ö–æ–¥–æ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç: –Ω–∞–π–¥—ë—Ç, –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –æ–±—ä—è—Å–Ω–∏—Ç.\n\n"
    "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
    "‚Äî –ü–æ–∏—Å–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–æ–≤ –æ–Ω–ª–∞–π–Ω\n"
    "‚Äî GPT-5 –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n"
    "‚Äî –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
    "‚Äî –ö–æ—Ä–æ—Ç–∫–∏–µ –∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã\n\n"
    "üî• –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º ‚Äî –ø–æ–ø—Ä–æ–±—É–π –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏ –æ—Ü–µ–Ω–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
    "–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª AI Systems –∏ –≤—Å—Ç—É–ø–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ Hubconsult."
)

REQUIRED_CHATS = (
    {"id": CHANNEL_CHAT_ID, "title": CHANNEL_USERNAME, "link": CHANNEL_LINK},
    {"id": GROUP_CHAT_ID, "title": GROUP_NAME, "link": GROUP_LINK},
)
SUBSCRIPTION_PROMPT_COOLDOWN = 30
_subscription_prompted: dict[int, float] = {}

SUBSCRIPTION_MESSAGE = (
    "<b>–î–æ—Å—Ç—É–ø –∫ SynteraGPT</b>\n\n"
    "–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª AI Systems –∏ –≤—Å—Ç—É–ø–∏ –≤ –≥—Ä—É–ø–ø—É Hubconsult. "
    "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\"."
)


def _fetch_subscription_status(user_id: int) -> bool:
    for chat in REQUIRED_CHATS:
        try:
            member = bot.get_chat_member(chat["id"], user_id)
        except ApiTelegramException:
            return False

        status = getattr(member, "status", None)
        if status not in {"creator", "administrator", "member", "owner"}:
            return False

    return True


def _send_subscription_prompt(chat_id: int, *, force: bool = False) -> None:
    now = time.time()
    last_prompt = _subscription_prompted.get(chat_id, 0)
    if not force and now - last_prompt < SUBSCRIPTION_PROMPT_COOLDOWN:
        return

    _subscription_prompted[chat_id] = now

    kb = types.InlineKeyboardMarkup(row_width=1)
    for chat in REQUIRED_CHATS:
        kb.add(
            types.InlineKeyboardButton(
                f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: {chat['title']}",
                url=chat["link"],
            )
        )

    kb.add(types.InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))

    bot.send_message(chat_id, SUBSCRIPTION_MESSAGE, parse_mode="HTML", reply_markup=kb)


def ensure_subscription(chat_id: int, user_id: int | None = None, *, notify: bool = True) -> bool:
    uid = user_id or chat_id

    if is_owner(uid):
        return True

    status = _fetch_subscription_status(uid)

    if status:
        _subscription_prompted.pop(chat_id, None)
        return True

    if notify:
        _send_subscription_prompt(chat_id, force=True)
    return False


def _display_name_from_user(user) -> str:
    if user is None:
        return ""

    return compose_display_name(
        username=getattr(user, "username", None),
        first_name=getattr(user, "first_name", None),
        last_name=getattr(user, "last_name", None),
    )


# --- –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à)
user_histories = {}  # {chat_id: [ {role: "user"/"assistant", content: "..."}, ... ]}
user_messages = {}  # {chat_id: [message_id, ...]}

# –∫–µ—à –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (–¥–ª—è –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞, –µ—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
_language_cache: dict[int, str] = {}

# --- –ö—ç—à –æ—Ç–≤–µ—Ç–æ–≤ ---
# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã: –∫–ª—é—á (chat_id, text_lower) -> –æ—Ç–≤–µ—Ç.
response_cache: dict[tuple[int, str], str] = {}


def _ensure_history_cached(chat_id: int) -> None:
    if chat_id not in user_histories:
        past = load_history(chat_id)
        if past:
            user_histories[chat_id] = past
        else:
            user_histories[chat_id] = []


def send_start_window(chat_id) -> None:
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞", url=BOT_DEEP_LINK))

    try:
        with PHOTO_FILE.open("rb") as photo:
            bot.send_photo(
                chat_id,
                photo,
                caption=START_CAPTION,
                reply_markup=kb,
                parse_mode="HTML",
            )
    except FileNotFoundError:
        bot.send_message(
            chat_id,
            START_CAPTION,
            reply_markup=kb,
            parse_mode="HTML",
        )


# --- /media
@bot.message_handler(commands=["media"])
def cmd_media(m):
    if not ensure_subscription(m.chat.id, getattr(m.from_user, "id", None)):
        return
    bot.send_message(
        m.chat.id,
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ —Ñ—É–Ω–∫—Ü–∏–∏:",
        reply_markup=multimedia_menu(),
    )


# --- /profile
@bot.message_handler(commands=["profile"])
def cmd_profile(m):
    if not ensure_subscription(m.chat.id, getattr(m.from_user, "id", None)):
        return
    bot.send_message(
        m.chat.id,
        f"–í–∞—à ID: {m.from_user.id}\n"
        f"–ò–º—è: {m.from_user.first_name}\n"
        "–ü–æ–¥–ø–∏—Å–∫–∞: FREE (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)",
    )


def send_and_store(chat_id, text, **kwargs):
    msg = bot.send_message(chat_id, text, **kwargs)
    user_messages.setdefault(chat_id, []).append(msg.message_id)
    return msg

# --- –û–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---


def send_welcome_menu(chat_id: int) -> None:
    send_and_store(
        chat_id,
        START_CAPTION,
        reply_markup=main_menu(),
        parse_mode="HTML",
    )

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(
        types.KeyboardButton("–ú–µ–¥–∏–∞"),
        types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å"),
    )
    kb.add(
        types.KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å"),
        types.KeyboardButton("Lang üåê"),
    )
    return kb


@bot.message_handler(func=lambda m: m.text == "–ü—Ä–æ—Ñ–∏–ª—å")
def show_profile(m):
    cmd_profile(m)


@bot.message_handler(func=lambda m: m.text == "–ú–µ–¥–∏–∞")
def show_media(m):
    cmd_media(m)

# --- –†–∞–±–æ—Ç–∞ —Å —è–∑—ã–∫–æ–º ---


def set_language(chat_id: int, lang: str) -> None:
    try:
        r.set(f"lang:{chat_id}", lang, ex=TTL)
    except Exception:
        pass
    _language_cache[chat_id] = lang


def get_language(chat_id: int) -> str:
    try:
        lang = r.get(f"lang:{chat_id}")
    except Exception:
        lang = None

    if lang:
        if isinstance(lang, bytes):
            lang = lang.decode("utf-8")
        _language_cache[chat_id] = str(lang)
        return str(lang)

    return _language_cache.get(chat_id, "ru")

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---

def get_user_mode(chat_id: int) -> str:
    if is_owner(chat_id):
        return "philosopher"
    return "short_friend"

# --- –†–µ–∂–∏–º—ã –æ–±—â–µ–Ω–∏—è ---

MODES = {
    "short_friend": {
        "name": "–ö–æ—Ä–æ—Ç–∫–∏–π –¥—Ä—É–≥",
        # –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: –¥—Ä—É–≥ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —á–µ—Å—Ç–Ω–æ,
        # –Ω–µ –∑–∞–¥–∞—ë—Ç –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –Ω–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.
        "system_prompt": (
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –º–æ–π –¥—Ä—É–≥ –∏ –ø–æ–º–æ—â–Ω–∏–∫. –Ø –±—É–¥—É –¥–µ–ª–∏—Ç—å—Å—è —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ "
            "–∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∞ —Ç—ã –æ—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ. "
            "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–∞–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã. –ù–µ –≤—Å—Ç–∞–≤–ª—è–π "
            "—Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å."
        ),
    },
    "philosopher": {
        "name": "–§–∏–ª–æ—Å–æ—Ñ",
        # –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: —Ñ–∏–ª–æ—Å–æ—Ñ –æ—Ç–≤–µ—á–∞–µ—Ç –≥–ª—É–±–æ–∫–æ, –Ω–æ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏,
        # –Ω–µ —Å—Å—ã–ª–∞—è—Å—å –Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –Ω–µ –æ—Ç–∫–∞–∑—ã–≤–∞—è—Å—å –æ—Ç –æ—Ç–≤–µ—Ç–∞.
        "system_prompt": (
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –º—É–¥—Ä—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ. –Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –∂–∏–∑–Ω–∏ –∏ –º–∏—Ä–µ. "
            "–¢—ã –æ—Ç–≤–µ—á–∞–π, –∏—Å—Å–ª–µ–¥—É—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ —Ç–µ–æ—Ä–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–π –≥–ª—É–±–æ–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è "
            "–∏ –Ω–æ–≤—ã–µ –∏–¥–µ–∏, –Ω–æ –±–µ–∑ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã. –î–∞–∂–µ –µ—Å–ª–∏ —Ç–µ–º–∞ —Å–ª–æ–∂–Ω–∞, "
            "–¥–∞–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –∑–Ω–∞–Ω–∏—è –∏ –ª–æ–≥–∏–∫—É."
        ),
    },
    "academic": {
        "name": "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π",
        # –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ–±—ä—è—Å–Ω—è–µ—Ç —Ç–µ–º—ã —è—Å–Ω–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ,
        # –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—É.
        "system_prompt": (
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –ù–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–∞–π "
            "—è—Å–Ω–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏ "
            "–ø—Ä–∏–º–µ—Ä—ã. –ü–æ–º–æ–≥–∏ –ø–æ–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã, —Ä–∞–∑–±–∏–≤–∞—è –∏—Ö –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ —á–∞—Å—Ç–∏. "
            "–ù–µ –≤—Å—Ç–∞–≤–ª—è–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –Ω–µ –æ—Ç–∫–∞–∑—ã–≤–∞–π—Å—è –æ—Ç –æ—Ç–≤–µ—Ç–∞."
        ),
    },
}

# --- –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ ---
# –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ GPT.
CONTEXT_MESSAGES = 4

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ chat_id ‚Äî –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∏–º—ã –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ.
_chat_locks: dict[int, Lock] = {}
_logger = logging.getLogger("synteragpt.stream")
_logger.setLevel(logging.INFO)
Path("/root/SynteraGPT/logs").mkdir(parents=True, exist_ok=True)
# –Ω–∞—Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Å—Ç–æ–π file handler (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
fh = logging.FileHandler("/root/SynteraGPT/logs/stream_gpt.log")
fh.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(message)s"))
_logger.addHandler(fh)



def ask_gpt(messages, max_tokens=None):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ OpenAI SDK.
    1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Responses API —Å tools (web-search, file-search –∏ —Ç.–¥.)
    2. –ï—Å–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ ‚Äî fallback –≤ Chat Completions.
    """
    try:
        # --- Responses API (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π web_search tools) ---
        inputs = prepare_responses_input(messages)
        resp = client.responses.create(
            model=inputs.get("model"),
            input=inputs.get("input"),
            temperature=inputs.get("temperature", 0.3),
            max_output_tokens=max_tokens or inputs.get("max_output_tokens"),
            tools=inputs.get("tools"),
            tool_choice=inputs.get("tool_choice"),
        )
        text = extract_response_text(resp)
        if isinstance(text, str) and text.strip():
            # –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Å—Å—ã–ª–æ–∫ —Ç–æ–ª—å–∫–æ –∫ –≥–æ—Ç–æ–≤–æ–º—É —Ç–µ–∫—Å—Ç—É
            return map_links_ru(text.strip())
    except Exception:
        pass

    # --- fallback: Chat Completions ---
    try:
        resp = client.chat.completions.create(
            model=CHAT_MODEL,
            messages=messages,
            response_format={"type": "text"},
        )
        text = extract_response_text(resp)
        if isinstance(text, str) and text.strip():
            return map_links_ru(text.strip())
    except Exception:
        pass

    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."

def _get_chat_lock(chat_id: int) -> Lock:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∏ —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) Lock –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞."""
    lock = _chat_locks.get(chat_id)
    if lock is None:
        lock = Lock()
        _chat_locks[chat_id] = lock
    return lock


def stream_gpt_answer(
    chat_id: int,
    user_text: str,
    mode_key: str = "short_friend",
    *,
    force_web: bool = False,
    allow_web_fallback: bool = False,
) -> None:
    """Stream a GPT-5 mini answer and optionally fall back to web search."""

    lock = _get_chat_lock(chat_id)
    if not lock.acquire(blocking=False):
        with suppress(Exception):
            bot.send_message(chat_id, "‚ö†Ô∏è –£–∂–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    try:
        _ensure_history_cached(chat_id)

        history = user_histories.setdefault(chat_id, [])
        history.append({"role": "user", "content": user_text})

        language = get_language(chat_id)
        mode_prompt = MODES[mode_key]["system_prompt"]
        system_prompt = (
            f"{SYSTEM_PROMPT}\n\n{mode_prompt}\n\n–û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {language}."
        )
        context_history = history[-CONTEXT_MESSAGES:]
        messages = [{"role": "system", "content": system_prompt}] + context_history

        cache_key = (chat_id, user_text.strip().lower())
        use_cache = not force_web
        cached = response_cache.get(cache_key) if use_cache else None
        if cached:
            show_typing(chat_id)
            draft = bot.send_message(chat_id, "‚Ä¶", reply_markup=main_menu())
            msg_id = draft.message_id
            safe_cached = sanitize_for_telegram(cached)
            try:
                bot.edit_message_text(safe_cached or cached, chat_id, msg_id, parse_mode="HTML")
            except Exception:
                with suppress(Exception):
                    bot.send_message(chat_id, safe_cached or cached, parse_mode="HTML")
            history.append({"role": "assistant", "content": cached})
            trimmed = history[-HISTORY_LIMIT:]
            user_histories[chat_id] = trimmed
            with suppress(Exception):
                save_history(chat_id, trimmed)
            return

        show_typing(chat_id)
        draft = bot.send_message(chat_id, "‚Ä¶", reply_markup=main_menu())
        msg_id = draft.message_id
        message_failed = False

        if force_web:
            try:
                web_raw = ask_gpt_web(user_text).strip()
            except Exception:
                if history and history[-1].get("role") == "user" and history[-1].get("content") == user_text:
                    history.pop()
                failure_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."
                safe_failure = sanitize_for_telegram(failure_text)
                try:
                    bot.edit_message_text(safe_failure or failure_text, chat_id, msg_id, parse_mode="HTML")
                except Exception:
                    with suppress(Exception):
                        bot.send_message(chat_id, safe_failure or failure_text, parse_mode="HTML")
                return

            final_text = sanitize_model_output(web_raw)
            if not final_text:
                final_text = "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."

            safe_text = sanitize_for_telegram(final_text)
            try:
                bot.edit_message_text(safe_text or final_text, chat_id, msg_id, parse_mode="HTML")
            except Exception:
                with suppress(Exception):
                    bot.send_message(chat_id, safe_text or final_text, parse_mode="HTML")

            history.append({"role": "assistant", "content": final_text})
            trimmed_history = history[-HISTORY_LIMIT:]
            user_histories[chat_id] = trimmed_history
            try:
                save_history(chat_id, trimmed_history)
            except Exception:
                _logger.exception("Failed to persist chat history")

            response_cache[cache_key] = final_text
            return

        try:
            final_text = ask_gpt(messages)
            error_occurred = False
        except Exception:
            final_text = ""
            error_occurred = True
            _logger.exception("Failed to get response")

        if error_occurred:
            if history and history[-1].get("role") == "user" and history[-1].get("content") == user_text:
                history.pop()
            failure_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."
            safe_failure = sanitize_for_telegram(failure_text)
            if not message_failed:
                try:
                    bot.edit_message_text(safe_failure or failure_text, chat_id, msg_id, parse_mode="HTML")
                except Exception:
                    message_failed = True
            if message_failed:
                with suppress(Exception):
                    bot.send_message(chat_id, safe_failure or failure_text, parse_mode="HTML")
            return

        final_text = sanitize_model_output(final_text)

        used_web = False
        if allow_web_fallback and should_escalate_to_web(user_text, final_text):
            try:
                if not message_failed:
                    try:
                        bot.edit_message_text(
                            "üåê –ò—â—É —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ‚Ä¶", chat_id, msg_id, parse_mode="HTML"
                        )
                    except Exception:
                        message_failed = True
                web_raw = ask_gpt_web(user_text).strip()
            except Exception:
                web_raw = ""

            if web_raw:
                new_final = sanitize_model_output(web_raw)
                if new_final:
                    final_text = new_final
                    used_web = True

        if not final_text:
            final_text = "‚ö†Ô∏è –û—Ç–≤–µ—Ç –ø—É—Å—Ç."

        final_text = map_links_ru(final_text)

        if used_web:
            response_cache.pop(cache_key, None)

        safe_text = sanitize_for_telegram(final_text)
        if not message_failed:
            try:
                bot.edit_message_text(safe_text or final_text, chat_id, msg_id, parse_mode="HTML")
            except Exception:
                message_failed = True
        if message_failed:
            with suppress(Exception):
                bot.send_message(chat_id, safe_text or final_text, parse_mode="HTML")

        history.append({"role": "assistant", "content": final_text})
        trimmed_history = history[-HISTORY_LIMIT:]
        user_histories[chat_id] = trimmed_history
        try:
            save_history(chat_id, trimmed_history)
        except Exception:
            _logger.exception("Failed to persist chat history")

        response_cache[cache_key] = final_text

    finally:
        with suppress(Exception):
            lock.release()

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@bot.message_handler(commands=["start"])
def start(m):
    if not ensure_subscription(m.chat.id, getattr(m.from_user, "id", None)):
        return
    send_welcome_menu(m.chat.id)


@bot.message_handler(commands=["publish"])
def publish(m):
    if not is_owner(m.from_user.id):
        bot.reply_to(m, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –æ–∫–Ω–∞.")
        return

    try:
        send_start_window(CHANNEL_CHAT_ID)
    except Exception as exc:
        bot.reply_to(m, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ: {exc}")
        return

    bot.send_message(
        m.chat.id,
        "–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ. –ó–∞–∫—Ä–µ–ø–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.",
    )


@bot.message_handler(func=lambda msg: msg.text == "–û—á–∏—Å—Ç–∏—Ç—å")
def cmd_clear(msg):
    if not ensure_subscription(msg.chat.id, getattr(msg.from_user, "id", None)):
        return
    clear_history(msg.chat.id)
    user_histories.pop(msg.chat.id, None)
    user_messages.pop(msg.chat.id, None)

    send_and_store(msg.chat.id, "üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞", reply_markup=main_menu())


@bot.message_handler(func=lambda msg: msg.text and msg.text.startswith("Lang"))
def cmd_language(msg):
    if not ensure_subscription(msg.chat.id, getattr(msg.from_user, "id", None)):
        return
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru"))
    kb.add(types.InlineKeyboardButton("English üá¨üáß", callback_data="lang_en"))
    kb.add(types.InlineKeyboardButton("‰∏≠Êñá üá®üá≥", callback_data="lang_zh"))

    bot.send_message(msg.chat.id, "üåê Choose your language:", reply_markup=kb)


@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def on_subscription_check(call):
    subscribed = ensure_subscription(
        call.message.chat.id,
        getattr(call.from_user, "id", None),
        notify=False,
    )
    if subscribed:
        bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        send_welcome_menu(call.message.chat.id)
    else:
        bot.answer_callback_query(
            call.id,
            "‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.",
            show_alert=False,
        )
        _send_subscription_prompt(call.message.chat.id, force=True)


@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def on_language_change(call):
    if not ensure_subscription(call.message.chat.id, getattr(call.from_user, "id", None)):
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –≥—Ä—É–ø–ø—É")
        return
    lang = call.data.split("_", 1)[1]
    set_language(call.message.chat.id, lang)

    names = {"ru": "–†—É—Å—Å–∫–∏–π üá∑üá∫", "en": "English üá¨üáß", "zh": "‰∏≠Êñá üá®üá≥"}
    chosen = names.get(lang, lang)
    bot.answer_callback_query(call.id, f"Language set: {chosen}")
    send_and_store(call.message.chat.id, f"‚úÖ Now I will talk in {chosen}", reply_markup=main_menu())


@bot.message_handler(commands=["top_users"])
def show_top_users(m):
    if not is_owner(getattr(m.from_user, "id", 0)):
        bot.reply_to(m, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
        return

    if not ensure_subscription(m.chat.id, getattr(m.from_user, "id", None)):
        return

    report = format_usage_report()
    bot.send_message(m.chat.id, report, parse_mode="HTML")


@bot.message_handler(commands=["user_stats"])
def show_user_stats(m):
    if not is_owner(getattr(m.from_user, "id", 0)):
        bot.reply_to(m, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
        return

    if not ensure_subscription(m.chat.id, getattr(m.from_user, "id", None)):
        return

    target_id = None
    hint_name = ""

    parts = (m.text or "").split(maxsplit=1)
    if len(parts) > 1:
        candidate = parts[1].strip()
        candidate = candidate.replace("@", "")
        if candidate.isdigit():
            target_id = int(candidate)
        else:
            bot.reply_to(m, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ü–∏—Ñ—Ä–∞–º–∏ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
    elif m.reply_to_message:
        target_user = getattr(m.reply_to_message, "from_user", None)
        if target_user:
            target_id = getattr(target_user, "id", None)
            hint_name = _display_name_from_user(target_user)

    if not target_id:
        bot.reply_to(m, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    report = format_user_stats(target_id, hint_name)
    bot.send_message(m.chat.id, report, parse_mode="HTML")

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ ---
def background_checker():
    counter = 1
    while True:
        if counter % 7 == 0:
            # –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—ç—à –æ—Ç–≤–µ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_histories.clear()
            response_cache.clear()
            for chat_id, msgs in user_messages.items():
                for msg_id in msgs:
                    try:
                        bot.delete_message(chat_id, msg_id)
                    except Exception:
                        pass
            user_messages.clear()
            for chat_id in iter_history_chat_ids():
                clear_history(chat_id)
            print("üßπ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")

        counter += 1
        time.sleep(86400)  # —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

# --- fallback ‚Äî –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–ª —Å –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT ---
@bot.message_handler(
    func=lambda msg: bool(getattr(msg, "text", "")) and not msg.text.startswith("/")
)
def fallback(m):
    if not ensure_subscription(m.chat.id, getattr(m.from_user, "id", None)):
        return
    user = getattr(m, "from_user", None)
    user_id = getattr(user, "id", m.chat.id)
    record_user_activity(
        user_id,
        category="text",
        display_name=_display_name_from_user(user),
    )
    mode = get_user_mode(m.chat.id)
    prefer_web = should_prefer_web(m.text)
    stream_gpt_answer(
        m.chat.id,
        m.text,
        mode,
        force_web=prefer_web,
        allow_web_fallback=not prefer_web,
    )

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    from worker_media import start_media_worker

    start_media_worker()
    threading.Thread(target=background_checker, daemon=True).start()

    while True:
        try:
            bot.polling(
                none_stop=True,
                timeout=60,
                long_polling_timeout=60,
                skip_pending=True,
            )
        except Exception as exc:  # noqa: BLE001 - —Ö–æ—Ç–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—ã–µ —Å–±–æ–∏
            log_exception(exc)



