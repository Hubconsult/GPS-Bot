import threading
import time
import logging
import datetime
import re
from threading import Lock
from contextlib import suppress
from pathlib import Path
from typing import Set

from storage import (
    init_db,
    get_user_usage,
    increment_used,
    clear_history,
    iter_history_chat_ids,
    load_history,
    reset_used_free,
    save_history,
    r,
    TTL,
)
from telebot import types

# Tariff configuration and state tracking
from tariffs import (
    TARIFFS,
    TARIFF_MODES,
    user_tariffs,
    activate_tariff,
    check_expiring_tariffs,
    start_payment,
)
from hints import get_hint
from info import get_info_text, info_keyboard

# Ensure media handlers are registered
import media
from media import multimedia_menu

# Register web search handlers (command /web)
import handlers.web  # noqa: F401 - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∏–º–ø–æ—Ä—Ç

from bot_utils import show_typing
from telebot import util as telebot_util

# --- –ö–æ–Ω—Ñ–∏–≥: –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ settings.py ---
from settings import (
    bot,
    client,
    CHAT_MODEL,
    FREE_LIMIT,
    HISTORY_LIMIT,
    is_owner,
    PAY_URL_HARMONY,
    PAY_URL_REFLECTION,
    PAY_URL_TRAVEL,
    SYSTEM_PROMPT,
)
from openai_adapter import extract_response_text, prepare_responses_input

# --- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ Chat/Responses API —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ ---
def ask_gpt(messages: list[dict], *, max_tokens: int | None = None) -> str:
    """
    –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å Chat Completions; –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º Responses API. –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ–∫–∞–µ–º —á–µ—Ä–µ–∑ extract_response_text.
    """

    # 1. Chat Completions ‚Äî max_tokens –∏–Ω–æ–≥–¥–∞ –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
    try:
        kwargs = {
            "model": CHAT_MODEL,
            "messages": messages,
            "response_format": {"type": "text"},
        }
        if max_tokens is not None:
            kwargs["max_completion_tokens"] = max_tokens
        resp = client.chat.completions.create(**kwargs)
        text = extract_response_text(resp)
        if text:
            return text.strip()
    except Exception:
        pass  # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ–±—É–µ–º responses API

    # 2. Responses API ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º max_output_tokens
    try:
        kwargs = {
            "model": CHAT_MODEL,
            "input": prepare_responses_input(messages),
            "response_format": {"type": "text"},
        }
        if max_tokens is not None:
            kwargs["max_output_tokens"] = max_tokens
        resp = client.responses.create(**kwargs)
        text = extract_response_text(resp)
        return text.strip() if text else ""
    except Exception:
        return ""

# Initialize the SQLite storage before handling any requests
init_db()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ ---
CHANNEL_USERNAME = "@SynteraAI"
CHANNEL_URL = "https://t.me/SynteraAI"
BOT_DEEP_LINK = "https://t.me/SynteraGPT_bot"
PHOTO_FILE = Path(__file__).resolve().parent / "baner_dlya_perehoda.png"
START_CAPTION = (
    "<b>SynteraGPT</b>\n\n"
    "–ß–∞—Ç-–±–æ—Ç —Å –≤—ã—Ö–æ–¥–æ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç: –Ω–∞–π–¥—ë—Ç, –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –æ–±—ä—è—Å–Ω–∏—Ç.\n\n"
    "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
    "‚Äî –ü–æ–∏—Å–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–æ–≤ –æ–Ω–ª–∞–π–Ω\n"
    "‚Äî GPT-5 –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n"
    "‚Äî –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
    "‚Äî –ö–æ—Ä–æ—Ç–∫–∏–µ –∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã\n\n"
    "üî• –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º ‚Äî –ø–æ–ø—Ä–æ–±—É–π –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏ –æ—Ü–µ–Ω–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
    "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª."
)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_moods = {}
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à)
user_histories = {}  # {chat_id: [ {role: "user"/"assistant", content: "..."}, ... ]}
user_messages = {}  # {chat_id: [message_id, ...]}

# –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω–∏–∫ –ø–æ —Ä–µ–∂–∏–º–∞–º
user_test_modes = {}  # {chat_id: str}
user_test_mode_usage = {}  # {chat_id: {"short_friend": int, "philosopher": int, "academic": int}}

# –∫–µ—à –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (–¥–ª—è –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞, –µ—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
_language_cache: dict[int, str] = {}

# --- –ö—ç—à –æ—Ç–≤–µ—Ç–æ–≤ ---
# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã: –∫–ª—é—á (chat_id, text_lower) -> –æ—Ç–≤–µ—Ç.
response_cache: dict[tuple[int, str], str] = {}

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ ---
verified_users: Set[int] = set()
pending_verification: Set[int] = set()


def _ensure_history_cached(chat_id: int) -> None:
    if chat_id not in user_histories:
        past = load_history(chat_id)
        if past:
            user_histories[chat_id] = past
        else:
            user_histories[chat_id] = []


def has_channel_subscription(user_id: int) -> bool:
    try:
        status = bot.get_chat_member(CHANNEL_USERNAME, user_id).status
    except Exception:
        return False
    return status in {"member", "administrator", "creator"}


def subscription_check_keyboard() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É", callback_data="check_and_open"))
    return kb


def pay_inline(chat_id: int) -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(row_width=1)
    for key, tariff in TARIFFS.items():
        url = start_payment(chat_id, key)
        kb.add(
            types.InlineKeyboardButton(
                f"{tariff['name']} ‚Ä¢ {tariff['price']} ‚ÇΩ", url=url
            )
        )
    return kb


def send_start_window(chat_id) -> None:
    keyboard = subscription_check_keyboard()

    try:
        with PHOTO_FILE.open("rb") as photo:
            bot.send_photo(
                chat_id,
                photo,
                caption=START_CAPTION,
                reply_markup=keyboard,
                parse_mode="HTML",
            )
    except FileNotFoundError:
        bot.send_message(
            chat_id,
            START_CAPTION,
            reply_markup=keyboard,
            parse_mode="HTML",
        )


def send_subscription_prompt(chat_id: int, user_id: int) -> None:
    send_start_window(chat_id)
    pending_verification.add(user_id)


def send_subscription_reminder(chat_id: int, user_id: int, *, force: bool = False) -> None:
    if not force and user_id in pending_verification:
        return

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_URL))
    kb.add(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_and_open"))

    bot.send_message(
        chat_id,
        (
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @SynteraAI.\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª."
        ),
        reply_markup=kb,
    )

    pending_verification.add(user_id)


def send_subscription_confirmed(chat_id: int) -> None:
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞", url=BOT_DEEP_LINK))
    bot.send_message(
        chat_id,
        "–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É.",
        reply_markup=kb,
    )


def ensure_verified(
    chat_id: int,
    user_id: int,
    *,
    remind: bool = True,
    force_check: bool = False,
) -> bool:
    if not force_check and user_id in verified_users:
        return True

    if has_channel_subscription(user_id):
        verified_users.add(user_id)
        pending_verification.discard(user_id)
        return True

    verified_users.discard(user_id)

    if remind:
        send_subscription_reminder(chat_id, user_id)

    return False


# --- /info
@bot.message_handler(commands=["info"])
def cmd_info(m):
    bot.send_message(
        m.chat.id,
        get_info_text(),
        reply_markup=info_keyboard(),
        parse_mode="HTML",
    )


# --- /pay
@bot.message_handler(commands=["pay"])
def cmd_pay(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    bot.send_message(
        m.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
        reply_markup=pay_inline(m.chat.id),
    )


# --- /media
@bot.message_handler(commands=["media"])
def cmd_media(m):
    bot.send_message(
        m.chat.id,
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ —Ñ—É–Ω–∫—Ü–∏–∏:",
        reply_markup=multimedia_menu(),
    )


# --- /profile
@bot.message_handler(commands=["profile"])
def cmd_profile(m):
    bot.send_message(
        m.chat.id,
        f"–í–∞—à ID: {m.from_user.id}\n"
        f"–ò–º—è: {m.from_user.first_name}\n"
        "–ü–æ–¥–ø–∏—Å–∫–∞: FREE (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)",
    )


def send_and_store(chat_id, text, **kwargs):
    msg = bot.send_message(chat_id, text, **kwargs)
    user_messages.setdefault(chat_id, []).append(msg.message_id)
    return msg

# --- –û–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---


def send_welcome_menu(chat_id: int) -> None:
    user_moods[chat_id] = []
    send_and_store(
        chat_id,
        START_CAPTION,
        reply_markup=main_menu(),
        parse_mode="HTML",
    )

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    kb.add("–ß–µ–∫-–∏–Ω", "–°—Ç–∞—Ç–∞", "–û–ø–ª–∞—Ç–∞")
    kb.add("–ú–µ–¥–∏–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü—Ä–æ—Ñ–∏–ª—å")
    kb.add("–û—á–∏—Å—Ç–∏—Ç—å", "Lang üåê")
    return kb


def pay_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    kb.add("Basic ‚Ä¢ 299 ‚ÇΩ")
    kb.add("Pro ‚Ä¢ 999 ‚ÇΩ")
    kb.add("Ultra ‚Ä¢ 1999 ‚ÇΩ")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb


@bot.message_handler(func=lambda m: m.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
def show_info(m):
    bot.send_message(
        m.chat.id,
        get_info_text(),
        reply_markup=info_keyboard(),
        parse_mode="HTML",
    )


@bot.message_handler(func=lambda m: m.text == "–ü—Ä–æ—Ñ–∏–ª—å")
def show_profile(m):
    cmd_profile(m)


@bot.message_handler(func=lambda m: m.text == "–ú–µ–¥–∏–∞")
def show_media(m):
    cmd_media(m)

# --- –†–∞–±–æ—Ç–∞ —Å —è–∑—ã–∫–æ–º ---


def set_language(chat_id: int, lang: str) -> None:
    try:
        r.set(f"lang:{chat_id}", lang, ex=TTL)
    except Exception:
        pass
    _language_cache[chat_id] = lang


def get_language(chat_id: int) -> str:
    try:
        lang = r.get(f"lang:{chat_id}")
    except Exception:
        lang = None

    if lang:
        if isinstance(lang, bytes):
            lang = lang.decode("utf-8")
        _language_cache[chat_id] = str(lang)
        return str(lang)

    return _language_cache.get(chat_id, "ru")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ ---

def check_limit(chat_id) -> bool:
    if is_owner(chat_id):
        return True

    if not ensure_verified(chat_id, chat_id, force_check=True):
        return False

    used, has_tariff = get_user_usage(chat_id)
    if has_tariff == 0 and used >= FREE_LIMIT:
        bot.send_message(
            chat_id,
            "üö´ <b>–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω.</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ üëá",
            reply_markup=pay_inline(chat_id),
        )
        return False
    return True

# --- Helpers ---

def increment_counter(chat_id) -> None:
    if is_owner(chat_id):
        reset_used_free(chat_id)
        return

    used, has_tariff = get_user_usage(chat_id)
    if has_tariff:
        if used:
            reset_used_free(chat_id)
        return

    increment_used(chat_id)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ ---

def get_user_mode(chat_id: int) -> str:
    # –ï—Å–ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞, –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–µ–∂–∏–º ¬´–§–∏–ª–æ—Å–æ—Ñ¬ª
    # –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞. OWNER_ID –∏ —Ñ—É–Ω–∫—Ü–∏—è is_owner –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏–∑ settings.py.
    if is_owner(chat_id):
        return "philosopher"

    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–µ–∂–∏–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–∞—Ä–∏—Ñ–æ–º
    info = user_tariffs.get(chat_id)
    if not info:
        return "short_friend"
    if info["end"] < datetime.date.today():
        user_tariffs.pop(chat_id, None)
        return "short_friend"
    return TARIFF_MODES.get(info["tariff"], "short_friend")

# --- –†–µ–∂–∏–º—ã –æ–±—â–µ–Ω–∏—è ---

MODES = {
    "short_friend": {
        "name": "–ö–æ—Ä–æ—Ç–∫–∏–π –¥—Ä—É–≥",
        # –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: –¥—Ä—É–≥ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —á–µ—Å—Ç–Ω–æ,
        # –Ω–µ –∑–∞–¥–∞—ë—Ç –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –Ω–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.
        "system_prompt": (
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –º–æ–π –¥—Ä—É–≥ –∏ –ø–æ–º–æ—â–Ω–∏–∫. –Ø –±—É–¥—É –¥–µ–ª–∏—Ç—å—Å—è —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ "
            "–∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∞ —Ç—ã –æ—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ. "
            "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–∞–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã. –ù–µ –≤—Å—Ç–∞–≤–ª—è–π "
            "—Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å."
        ),
    },
    "philosopher": {
        "name": "–§–∏–ª–æ—Å–æ—Ñ",
        # –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: —Ñ–∏–ª–æ—Å–æ—Ñ –æ—Ç–≤–µ—á–∞–µ—Ç –≥–ª—É–±–æ–∫–æ, –Ω–æ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏,
        # –Ω–µ —Å—Å—ã–ª–∞—è—Å—å –Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –Ω–µ –æ—Ç–∫–∞–∑—ã–≤–∞—è—Å—å –æ—Ç –æ—Ç–≤–µ—Ç–∞.
        "system_prompt": (
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –º—É–¥—Ä—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ. –Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –∂–∏–∑–Ω–∏ –∏ –º–∏—Ä–µ. "
            "–¢—ã –æ—Ç–≤–µ—á–∞–π, –∏—Å—Å–ª–µ–¥—É—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ —Ç–µ–æ—Ä–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–π –≥–ª—É–±–æ–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è "
            "–∏ –Ω–æ–≤—ã–µ –∏–¥–µ–∏, –Ω–æ –±–µ–∑ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã. –î–∞–∂–µ –µ—Å–ª–∏ —Ç–µ–º–∞ —Å–ª–æ–∂–Ω–∞, "
            "–¥–∞–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –∑–Ω–∞–Ω–∏—è –∏ –ª–æ–≥–∏–∫—É."
        ),
    },
    "academic": {
        "name": "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π",
        # –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ–±—ä—è—Å–Ω—è–µ—Ç —Ç–µ–º—ã —è—Å–Ω–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ,
        # –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—É.
        "system_prompt": (
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –ù–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–∞–π "
            "—è—Å–Ω–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏ "
            "–ø—Ä–∏–º–µ—Ä—ã. –ü–æ–º–æ–≥–∏ –ø–æ–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã, —Ä–∞–∑–±–∏–≤–∞—è –∏—Ö –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ —á–∞—Å—Ç–∏. "
            "–ù–µ –≤—Å—Ç–∞–≤–ª—è–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –Ω–µ –æ—Ç–∫–∞–∑—ã–≤–∞–π—Å—è –æ—Ç –æ—Ç–≤–µ—Ç–∞."
        ),
    },
}

TEST_BUTTONS = ["–î—Ä—É–≥", "–§–∏–ª–æ—Å–æ—Ñ", "–ê–∫–∞–¥–µ–º–∏–∫"]
TEST_BUTTON_CONFIG = {
    "–î—Ä—É–≥": ("üé≠", "short_friend"),
    "–§–∏–ª–æ—Å–æ—Ñ": ("üìö", "philosopher"),
    "–ê–∫–∞–¥–µ–º–∏–∫": ("üß≠", "academic"),
}

# --- GPT-5 Mini –æ—Ç–≤–µ—Ç —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –≤—ã–¥–∞—á–µ–π ---

EDIT_INTERVAL = 0.4             # –Ω–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–µ–∫)
FIRST_CHUNK_TOKENS = 12         # –ø–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤
STREAM_STALL_TIMEOUT = 30.0     # —É–≤–µ–ª–∏—á–∏–ª–∏ —Å 12.0, –¥–∞—ë–º —Å—Ç—Ä–∏–º—É –¥–æ 30 —Å–µ–∫—É–Ω–¥ —Ç–∏—à–∏–Ω—ã
MAX_RETRIES = 3                 # —É–≤–µ–ª–∏—á–∏–ª–∏ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ —Å 2 –¥–æ 3
BACKOFF_BASE = 1.0              # –±–∞–∑–æ–≤–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ retry (—Å–µ–∫)

# --- –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ ---
# –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ GPT.
CONTEXT_MESSAGES = 4

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ chat_id ‚Äî –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∏–º—ã –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ.
_chat_locks: dict[int, Lock] = {}
_logger = logging.getLogger("synteragpt.stream")
_logger.setLevel(logging.INFO)
Path("/root/SynteraGPT/logs").mkdir(parents=True, exist_ok=True)
# –Ω–∞—Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Å—Ç–æ–π file handler (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
fh = logging.FileHandler("/root/SynteraGPT/logs/stream_gpt.log")
fh.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(message)s"))
_logger.addHandler(fh)

_RE_RESPONSE_REPR = re.compile(r"Response\w+Item\([^)]*\)")


def sanitize_model_output(text):
    """Remove service objects that may leak from the SDK before sending to users."""

    if not isinstance(text, str):
        return "" if text is None else str(text)

    return _RE_RESPONSE_REPR.sub("", text).strip()


def _sanitize_for_telegram(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ –±–ª–æ–∫–∏ (<think>) –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–∞–¥–∞–ª."""

    sanitized = sanitize_model_output(text)
    if not sanitized:
        return ""

    cleaned = sanitized.replace("<think>", "").replace("</think>", "")
    # –ò–Ω–æ–≥–¥–∞ reasoning –±–ª–æ–∫–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –≤–∏–¥–µ —Ç—ç–≥–æ–≤ <reasoning></reasoning>
    cleaned = cleaned.replace("<reasoning>", "").replace("</reasoning>", "")
    # –£–¥–∞–ª—è–µ–º –Ω—É–ª–µ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ Telegram –Ω–µ –ª—é–±–∏—Ç
    cleaned = cleaned.replace("\x00", "")
    return telebot_util.escape(cleaned)


def _get_chat_lock(chat_id: int) -> Lock:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∏ —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) Lock –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞."""
    lock = _chat_locks.get(chat_id)
    if lock is None:
        lock = Lock()
        _chat_locks[chat_id] = lock
    return lock


def stream_gpt_answer(chat_id: int, user_text: str, mode_key: str = "short_friend") -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ GPT‚Äë5 mini –±–µ–∑ —Å—Ç—Ä–∏–º–∞: —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    lock = _get_chat_lock(chat_id)
    if not lock.acquire(blocking=False):
        with suppress(Exception):
            bot.send_message(chat_id, "‚ö†Ô∏è –£–∂–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    try:
        _ensure_history_cached(chat_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        history = user_histories.setdefault(chat_id, [])
        history.append({"role": "user", "content": user_text})

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT
        context_history = history[-CONTEXT_MESSAGES:]
        system_prompt = MODES[mode_key]["system_prompt"]
        messages = [{"role": "system", "content": system_prompt}] + context_history

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = (chat_id, user_text.strip().lower())
        cached = response_cache.get(cache_key)
        if cached:
            show_typing(chat_id)
            draft = bot.send_message(chat_id, "‚Ä¶", reply_markup=main_menu())
            msg_id = draft.message_id
            safe_cached = _sanitize_for_telegram(cached)
            bot.edit_message_text(safe_cached or cached, chat_id, msg_id, parse_mode="HTML")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            history.append({"role": "assistant", "content": cached})
            trimmed = history[-HISTORY_LIMIT:]
            user_histories[chat_id] = trimmed
            with suppress(Exception):
                save_history(chat_id, trimmed)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏ —á–µ—Ä–Ω–æ–≤–∏–∫
        show_typing(chat_id)
        draft = bot.send_message(chat_id, "‚Ä¶", reply_markup=main_menu())
        msg_id = draft.message_id

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ GPT –±–µ–∑ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
        try:
            final_text = ask_gpt(messages)
            final_text = (final_text or "").strip()
        except Exception:
            final_text = ""

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        final_text = sanitize_model_output(final_text)
        if not final_text:
            final_text = "‚ö†Ô∏è –û—Ç–≤–µ—Ç –ø—É—Å—Ç."

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        response_cache[cache_key] = final_text

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        safe_text = _sanitize_for_telegram(final_text)
        try:
            bot.edit_message_text(safe_text or final_text, chat_id, msg_id, parse_mode="HTML")
        except Exception:
            with suppress(Exception):
                bot.send_message(chat_id, safe_text or final_text, parse_mode="HTML")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        history.append({"role": "assistant", "content": final_text})
        trimmed_history = history[-HISTORY_LIMIT:]
        user_histories[chat_id] = trimmed_history
        try:
            save_history(chat_id, trimmed_history)
        except Exception:
            _logger.exception("Failed to persist chat history")

    finally:
        with suppress(Exception):
            lock.release()

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@bot.message_handler(commands=["start"])
def start(m):
    if ensure_verified(
        m.chat.id,
        m.from_user.id,
        remind=False,
        force_check=True,
    ):
        send_welcome_menu(m.chat.id)
    else:
        send_subscription_prompt(m.chat.id, m.from_user.id)


@bot.message_handler(commands=["publish"])
def publish(m):
    if not is_owner(m.from_user.id):
        bot.reply_to(m, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –æ–∫–Ω–∞.")
        return

    try:
        send_start_window(CHANNEL_USERNAME)
    except Exception as exc:
        bot.reply_to(m, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ: {exc}")
        return

    bot.send_message(
        m.chat.id,
        "–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ. –ó–∞–∫—Ä–µ–ø–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.",
    )


@bot.callback_query_handler(func=lambda call: call.data == "check_and_open")
def check_and_open(call):
    was_verified = call.from_user.id in verified_users

    if ensure_verified(call.message.chat.id, call.from_user.id, remind=False, force_check=True):
        if was_verified:
            bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        else:
            bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
            send_subscription_confirmed(call.message.chat.id)

        send_welcome_menu(call.message.chat.id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        send_subscription_reminder(call.message.chat.id, call.from_user.id, force=True)

@bot.message_handler(func=lambda msg: msg.text == "–ß–µ–∫-–∏–Ω")
def mood_start(m):
    if not check_limit(m.chat.id): return
    increment_counter(m.chat.id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4, one_time_keyboard=True)
    kb.add("üòä", "üòü", "üò¥", "üò°")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    send_and_store(m.chat.id, "–í—ã–±–µ—Ä–∏ —Å–º–∞–π–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±–ª–∏–∂–µ –∫ —Ç–≤–æ–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text in ["üòä", "üòü", "üò¥", "üò°"])
def mood_save(m):
    if not check_limit(m.chat.id): return
    increment_counter(m.chat.id)
    user_moods.setdefault(m.chat.id, []).append(m.text)
    send_and_store(m.chat.id, f"–ü—Ä–∏–Ω—è–ª {m.text}. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–º–µ—Ç–∫—É!", reply_markup=main_menu())


@bot.message_handler(func=lambda msg: msg.text == "–û—á–∏—Å—Ç–∏—Ç—å")
def cmd_clear(msg):
    if not ensure_verified(msg.chat.id, msg.from_user.id, force_check=True):
        return

    clear_history(msg.chat.id)
    user_histories.pop(msg.chat.id, None)
    user_messages.pop(msg.chat.id, None)
    user_test_modes.pop(msg.chat.id, None)

    send_and_store(msg.chat.id, "üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞", reply_markup=main_menu())


@bot.message_handler(func=lambda msg: msg.text and msg.text.startswith("Lang"))
def cmd_language(msg):
    if not ensure_verified(msg.chat.id, msg.from_user.id, force_check=True):
        return

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru"))
    kb.add(types.InlineKeyboardButton("English üá¨üáß", callback_data="lang_en"))
    kb.add(types.InlineKeyboardButton("‰∏≠Êñá üá®üá≥", callback_data="lang_zh"))

    bot.send_message(msg.chat.id, "üåê Choose your language:", reply_markup=kb)


@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def on_language_change(call):
    if not ensure_verified(call.message.chat.id, call.from_user.id, force_check=True):
        bot.answer_callback_query(call.id, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞")
        return

    lang = call.data.split("_", 1)[1]
    set_language(call.message.chat.id, lang)

    names = {"ru": "–†—É—Å—Å–∫–∏–π üá∑üá∫", "en": "English üá¨üáß", "zh": "‰∏≠Êñá üá®üá≥"}
    chosen = names.get(lang, lang)
    bot.answer_callback_query(call.id, f"Language set: {chosen}")
    send_and_store(call.message.chat.id, f"‚úÖ Now I will talk in {chosen}", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "–°—Ç–∞—Ç–∞")
def stats(m):
    if not check_limit(m.chat.id): return
    increment_counter(m.chat.id)
    moods = user_moods.get(m.chat.id, [])
    counts = {e: moods.count(e) for e in ["üòä", "üòü", "üò¥", "üò°"]}
    send_and_store(
        m.chat.id,
        f"üìä <b>–¢–≤–æ—è –Ω–µ–¥–µ–ª—è</b>\n"
        f"üòä –†–∞–¥–æ—Å—Ç—å: {counts['üòä']}\n"
        f"üòü –¢—Ä–µ–≤–æ–≥–∞: {counts['üòü']}\n"
        f"üò¥ –£—Å—Ç–∞–ª–æ—Å—Ç—å: {counts['üò¥']}\n"
        f"üò° –ó–ª–æ—Å—Ç—å: {counts['üò°']}",
        reply_markup=main_menu(),
    )

@bot.message_handler(func=lambda msg: msg.text == "–û–ø–ª–∞—Ç–∞")
def pay_button(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    send_and_store(
        m.chat.id,
        get_info_text(),
        reply_markup=info_keyboard(),
    )
    send_and_store(
        m.chat.id,
        "–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ üëá",
        reply_markup=pay_menu()
    )


@bot.message_handler(
    func=lambda msg: msg.text in [
        "Basic ‚Ä¢ 299 ‚ÇΩ",
        "Pro ‚Ä¢ 999 ‚ÇΩ",
        "Ultra ‚Ä¢ 1999 ‚ÇΩ",
    ]
)
def tariffs(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    if m.text.startswith("Basic"):
        url = PAY_URL_HARMONY
    elif m.text.startswith("Pro"):
        url = PAY_URL_REFLECTION
    else:
        url = PAY_URL_TRAVEL

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ üí≥", url=url))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))

    send_and_store(m.chat.id, f"–¢—ã –≤—ã–±—Ä–∞–ª: {m.text}", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back_to_menu(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    send_and_store(m.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


@bot.callback_query_handler(func=lambda call: call.data == "back")
def callback_back(call):
    bot.answer_callback_query(call.id)

    if not ensure_verified(call.message.chat.id, call.from_user.id, force_check=True):
        return

    send_and_store(
        call.message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )


@bot.callback_query_handler(func=lambda call: call.data == "back_to_menu")
def callback_back_to_menu(call):
    bot.answer_callback_query(call.id)

    if not ensure_verified(call.message.chat.id, call.from_user.id, force_check=True):
        return

    send_and_store(
        call.message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ ---
@bot.message_handler(commands=["tariffs"])
def show_tariffs(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    text = "üìú <b>–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø—É—Ç—å</b>\n\n"
    for key, t in TARIFFS.items():
        text += f"{t['name']} ‚Äî {t['price']} ‚ÇΩ/–º–µ—Å.\n{t['description']}\n\n"

    kb = types.InlineKeyboardMarkup(row_width=1)
    for key, t in TARIFFS.items():
        kb.add(
            types.InlineKeyboardButton(
                f"{t['name']} ‚Ä¢ {t['price']} ‚ÇΩ", url=t["pay_url"]
            )
        )

    send_and_store(m.chat.id, text, reply_markup=kb)

# --- –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–∞ ---
@bot.message_handler(commands=["activate"])
def activate(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    parts = m.text.split()
    if len(parts) < 2:
        send_and_store(
            m.chat.id,
            "‚ùå –£–∫–∞–∂–∏ —Ç–∞—Ä–∏—Ñ: basic, pro –∏–ª–∏ ultra",
        )
        return

    tariff_key = parts[1]
    _reward, msg = activate_tariff(m.chat.id, tariff_key)
    send_and_store(m.chat.id, msg)

# --- –ü–æ–¥—Å–∫–∞–∑–∫–∞ ---
@bot.message_handler(commands=["hint"])
def hint(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    parts = m.text.split()
    if len(parts) < 3:
        send_and_store(
            m.chat.id, "‚ùå –£–∫–∞–∂–∏ —Ç–∞—Ä–∏—Ñ –∏ —à–∞–≥ –ø–æ–¥—Å–∫–∞–∑–∫–∏: /hint basic 0"
        )
        return

    tariff_key, step = parts[1], int(parts[2])
    hint_text = get_hint(TARIFFS[tariff_key]["category"], step)
    send_and_store(m.chat.id, f"üîÆ –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint_text}")

@bot.message_handler(
    func=lambda msg: any(
        word in msg.text.lower()
        for word in [
            "–∫—Ç–æ —Ç—ã",
            "—á—Ç–æ —Ç—ã",
            "–∫–∞–∫–∞—è –≤–µ—Ä—Å–∏—è",
            "—Ç–≤–æ—è –≤–µ—Ä—Å–∏—è",
            "–≤–µ—Ä—Å–∏—è –≥–ø—Ç",
            "–∫–∞–∫–∞—è –º–æ–¥–µ–ª—å",
            "—Ç–≤–æ—è –º–æ–¥–µ–ª—å",
            "–º–æ–¥–µ–ª—å –≥–ø—Ç",
            "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
            "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
            "gpt",
        ]
    )
)
def who_are_you(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    text = (
        "–Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –±–∞–∑–µ GPT-5, –Ω–æ–≤–µ–π—à–µ–π –º–æ–¥–µ–ª–∏. "
        "GPT-5 –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫—É—é –ø—Ä–æ—Ä–∞–±–æ—Ç–∫—É –¥–∏–∞–ª–æ–≥–∞, –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å "
        "–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å, –æ–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. "
        "–ú–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è: –ö–æ—Ä–æ—Ç–∫–∏–π –¥—Ä—É–≥, –§–∏–ª–æ—Å–æ—Ñ –∏ –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π. "
        "–û–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Å—Ç–∏ –∂–∏–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä, –¥–∞–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã "
        "–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏. "
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPT-5 –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã, "
        "–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –≤ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–µ –∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π."
    )
    bot.send_message(m.chat.id, text, reply_markup=main_menu())

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ ---
def background_checker():
    counter = 1
    while True:
        check_expiring_tariffs(bot)

        if counter % 7 == 0:
            # –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—ç—à –æ—Ç–≤–µ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_histories.clear()
            response_cache.clear()
            for chat_id, msgs in user_messages.items():
                for msg_id in msgs:
                    try:
                        bot.delete_message(chat_id, msg_id)
                    except Exception:
                        pass
            user_messages.clear()
            for chat_id in iter_history_chat_ids():
                clear_history(chat_id)
            print("üßπ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")

        counter += 1
        time.sleep(86400)  # —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

# --- –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã ---
@bot.message_handler(commands=["testmodes"])
def test_modes_menu(m):
    if not ensure_verified(m.chat.id, m.from_user.id, force_check=True):
        return

    kb = types.InlineKeyboardMarkup(row_width=1)
    for title in TEST_BUTTONS:
        emoji, mode_key = TEST_BUTTON_CONFIG[title]
        kb.add(
            types.InlineKeyboardButton(
                f"{emoji} {title} (2 —Å–æ–æ–±—â–µ–Ω–∏—è)",
                callback_data=f"test_{mode_key}",
            )
        )
    bot.send_message(
        m.chat.id,
        "üîç –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:\n–ö–∞–∂–¥—ã–π –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è.",
        reply_markup=kb
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("test_"))
def run_test_mode(call):
    if not ensure_verified(call.message.chat.id, call.from_user.id, force_check=True):
        bot.answer_callback_query(call.id)
        return

    chat_id = call.message.chat.id
    mode_key = call.data.replace("test_", "")
    if chat_id not in user_test_mode_usage:
        user_test_mode_usage[chat_id] = {
            "short_friend": 0,
            "philosopher": 0,
            "academic": 0,
        }

    if user_test_mode_usage[chat_id][mode_key] >= 2:
        bot.answer_callback_query(call.id, "‚ùå –õ–∏–º–∏—Ç 2 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –∏—Å—á–µ—Ä–ø–∞–Ω.")
        return

    bot.answer_callback_query(call.id, f"‚úÖ –ü—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º {MODES[mode_key]['name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    bot.send_message(chat_id, f"–°–ø—Ä–æ—Å–∏ –º–µ–Ω—è —á—Ç–æ-—Ç–æ –≤ —Ä–µ–∂–∏–º–µ <b>{MODES[mode_key]['name']}</b> üëá")

    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω, –Ω–æ –Ω–µ —Ç—Ä–∞—Ç–∏–º –ø–æ–ø—ã—Ç–∫—É
    clear_history(chat_id)
    user_histories[chat_id] = []
    user_test_modes[chat_id] = mode_key

# --- fallback ‚Äî –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–ª —Å –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT ---
@bot.message_handler(func=lambda msg: True)
def fallback(m):
    if not check_limit(m.chat.id): return
    increment_counter(m.chat.id)
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    mode_key = user_test_modes.get(m.chat.id)
    if mode_key and mode_key in user_test_mode_usage.get(m.chat.id, {}):
        if user_test_mode_usage[m.chat.id][mode_key] < 2:
            stream_gpt_answer(m.chat.id, m.text, mode_key)
            user_test_mode_usage[m.chat.id][mode_key] += 1
            if user_test_mode_usage[m.chat.id][mode_key] >= 2:
                user_test_modes.pop(m.chat.id, None)
            return
        else:
            user_test_modes.pop(m.chat.id, None)

    mode = get_user_mode(m.chat.id)
    stream_gpt_answer(m.chat.id, m.text, mode)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    from worker_media import start_media_worker
    from worker_payments import start_payments_worker

    start_media_worker()
    start_payments_worker()
    threading.Thread(target=background_checker, daemon=True).start()

    try:
        bot.infinity_polling(
            timeout=60,
            long_polling_timeout=60,
            skip_pending=True,
        )
    except Exception as e:
        print("CRITICAL: polling crashed:", e)
        raise



