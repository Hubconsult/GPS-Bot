from telebot import types
import re
import threading
import time

from tariffs import TARIFFS, activate_tariff, check_expiring_tariffs
from hints import get_hint
from bot_utils import offer_renew

# --- –ö–æ–Ω—Ñ–∏–≥: –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ settings.py ---
from settings import bot, client, FREE_LIMIT, PAY_BUTTON_URL, OWNER_IDS

# --- –§–∏–ª—å—Ç—Ä: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 1 —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ + 1 –≤–æ–ø—Ä–æ—Å ---
def force_short_reply(text: str) -> str:
    sentences = re.split(r'(?<=[.?!])\s+', text.strip())
    short = []
    for s in sentences:
        if s:
            short.append(s.strip())
        if len(short) == 2:
            break
    return " ".join(short)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_counters = {}
user_moods = {}
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_histories = {}  # {chat_id: [ {role: "user"/"assistant", content: "..."}, ... ]}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add("–ß–µ–∫-–∏–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", "–ë—ã—Å—Ç—Ä–∞—è –ø–æ–º–æ—â—å")
    kb.add("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    return kb

def pay_inline():
    ikb = types.InlineKeyboardMarkup()
    ikb.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚Äî 299 ‚ÇΩ", url=PAY_BUTTON_URL))
    return ikb

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ ---
def check_limit(chat_id) -> bool:
    # üöÄ –í–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ –ª–∏–º–∏—Ç—ã –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è
    if chat_id in OWNER_IDS:
        return True

    used = user_counters.get(chat_id, 0)
    if used >= FREE_LIMIT:
        bot.send_message(
            chat_id,
            "üö´ <b>–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω.</b>\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ <b>299 ‚ÇΩ/–º–µ—Å.</b> üëá",
            reply_markup=pay_inline(),
        )
        return False
    return True

# --- Helpers ---
def increment_counter(chat_id) -> None:
    """Increase the message counter for a user.

    Creates the counter if it's the first interaction without requiring /start.
    """
    user_counters[chat_id] = user_counters.get(chat_id, 0) + 1

# --- –û–±—Ä–µ–∑–∞–µ–º –æ—Ç–≤–µ—Ç GPT –¥–æ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π ---
def force_short_reply(text: str) -> str:
    sentences = re.split(r'(?<=[.?!])\s+', text)
    return " ".join(sentences[:2]).strip()


# --- GPT-5 Mini –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π ---
def gpt_answer(chat_id: int, user_text: str) -> str:
    try:
        history = user_histories.get(chat_id, [])
        history.append({"role": "user", "content": user_text})
        history = history[-5:]
        user_histories[chat_id] = history

        messages = [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî –¥—Ä—É–≥ –∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. "
                    "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–æ: –æ–¥–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å. "
                    "–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–∏—Å–∞—Ç—å —Å–ø–∏—Å–∫–∏, –¥–ª–∏–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—Ä–∞–∑—É."
                ),
            },
            {
                "role": "assistant",
                "content": "–°–ª—ã—à—É, —á—Ç–æ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ. –°–∫–∞–∂–∏, —ç—Ç–æ –±–æ–ª—å—à–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏–ª–∏ –Ω–∞ —Ç—Ä–µ–≤–æ–≥—É?",
            },
        ] + history

        response = client.chat.completions.create(
            model="gpt-5-mini",
            messages=messages,
        )

        reply = response.choices[0].message.content.strip()
        reply = force_short_reply(reply)  # –æ–±—Ä–µ–∑–∞–µ–º –≤—Å—ë –¥–ª–∏–Ω–Ω–µ–µ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

        history.append({"role": "assistant", "content": reply})
        user_histories[chat_id] = history[-5:]

        return reply
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT: {e}"

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@bot.message_handler(commands=["start"])
def start(m):
    user_counters[m.chat.id] = 0
    user_moods[m.chat.id] = []
    text = (
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø —Ç–≤–æ–π <b>–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π GPS</b>.\n\n"
        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã <b>10 –¥–∏–∞–ª–æ–≥–æ–≤</b>\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n\n"
    )
    for key, t in TARIFFS.items():
        text += f"{t['name']} ‚Äî {t['price']} ‚ÇΩ/–º–µ—Å.\n"

    bot.send_message(m.chat.id, text, reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "–ß–µ–∫-–∏–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")
def mood_start(m):
    if not check_limit(m.chat.id): return
    increment_counter(m.chat.id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4, one_time_keyboard=True)
    kb.add("üòä", "üòü", "üò¥", "üò°")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏ —Å–º–∞–π–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±–ª–∏–∂–µ –∫ —Ç–≤–æ–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text in ["üòä", "üòü", "üò¥", "üò°"])
def mood_save(m):
    if not check_limit(m.chat.id): return
    increment_counter(m.chat.id)
    user_moods.setdefault(m.chat.id, []).append(m.text)
    bot.send_message(m.chat.id, f"–ü—Ä–∏–Ω—è–ª {m.text}. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–º–µ—Ç–∫—É!", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "–ë—ã—Å—Ç—Ä–∞—è –ø–æ–º–æ—â—å")
def quick_help(m):
    if not check_limit(m.chat.id): return
    increment_counter(m.chat.id)
    bot.send_message(
        m.chat.id,
        "üß≠ <b>–ë—ã—Å—Ç—Ä–∞—è –ø–æ–º–æ—â—å</b>\n"
        "‚Ä¢ –î—ã—Ö–∞–Ω–∏–µ 4-7-8\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∞ ¬´5 –≤–µ—â–µ–π –≤–æ–∫—Ä—É–≥¬ª\n"
        "‚Ä¢ –ú—ã—à–µ—á–Ω–æ–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ\n",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def stats(m):
    if not check_limit(m.chat.id): return
    increment_counter(m.chat.id)
    moods = user_moods.get(m.chat.id, [])
    counts = {e: moods.count(e) for e in ["üòä", "üòü", "üò¥", "üò°"]}
    bot.send_message(
        m.chat.id,
        f"üìä <b>–¢–≤–æ—è –Ω–µ–¥–µ–ª—è</b>\n"
        f"üòä –†–∞–¥–æ—Å—Ç—å: {counts['üòä']}\n"
        f"üòü –¢—Ä–µ–≤–æ–≥–∞: {counts['üòü']}\n"
        f"üò¥ –£—Å—Ç–∞–ª–æ—Å—Ç—å: {counts['üò¥']}\n"
        f"üò° –ó–ª–æ—Å—Ç—å: {counts['üò°']}",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
def pay_button(m):
    bot.send_message(
        m.chat.id,
        "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –ÆKassa. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=pay_inline()
    )

@bot.message_handler(func=lambda msg: msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back_to_menu(m):
    bot.send_message(m.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ ---
@bot.message_handler(commands=["tariffs"])
def show_tariffs(m):
    text = "üìú <b>–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø—É—Ç—å</b>\n\n"
    for key, t in TARIFFS.items():
        text += f"{t['name']} ‚Äî {t['price']} ‚ÇΩ/–º–µ—Å.\n{t['description']}\n\n"

    kb = types.InlineKeyboardMarkup(row_width=1)
    for key, t in TARIFFS.items():
        kb.add(
            types.InlineKeyboardButton(
                f"{t['name']} ‚Ä¢ {t['price']} ‚ÇΩ", url=t["pay_url"]
            )
        )

    bot.send_message(m.chat.id, text, reply_markup=kb)

# --- –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–∞ ---
@bot.message_handler(commands=["activate"])
def activate(m):
    parts = m.text.split()
    if len(parts) < 2:
        bot.send_message(
            m.chat.id,
            "‚ùå –£–∫–∞–∂–∏ —Ç–∞—Ä–∏—Ñ: sozvuchie, otrazhenie –∏–ª–∏ puteshestvie",
        )
        return

    tariff_key = parts[1]
    reward, msg = activate_tariff(m.chat.id, tariff_key)
    if reward:
        bot.send_message(m.chat.id, f"{msg}\n\n–¢–≤–æ—è –ø–µ—Ä–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {reward}")
    else:
        bot.send_message(m.chat.id, msg)

# --- –ü–æ–¥—Å–∫–∞–∑–∫–∞ ---
@bot.message_handler(commands=["hint"])
def hint(m):
    parts = m.text.split()
    if len(parts) < 3:
        bot.send_message(
            m.chat.id, "‚ùå –£–∫–∞–∂–∏ —Ç–∞—Ä–∏—Ñ –∏ —à–∞–≥ –ø–æ–¥—Å–∫–∞–∑–∫–∏: /hint sozvuchie 0"
        )
        return

    tariff_key, step = parts[1], int(parts[2])
    hint_text = get_hint(TARIFFS[tariff_key]["category"], step)
    bot.send_message(m.chat.id, f"üîÆ –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint_text}")

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫ ---
def background_checker():
    while True:
        check_expiring_tariffs(bot)
        time.sleep(86400)  # —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

# --- fallback ‚Äî –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–ª —Å –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT ---
@bot.message_handler(func=lambda msg: True)
def fallback(m):
    if not check_limit(m.chat.id): return
    increment_counter(m.chat.id)
    answer = gpt_answer(m.chat.id, m.text)  # GPT-5 Mini –æ—Ç–≤–µ—á–∞–µ—Ç
    bot.send_message(m.chat.id, answer, reply_markup=main_menu())

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    threading.Thread(target=background_checker, daemon=True).start()
    bot.infinity_polling(skip_pending=True)



